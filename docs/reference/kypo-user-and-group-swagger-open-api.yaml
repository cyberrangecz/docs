---
swagger: "2.0"
info:
  version: "Version: 22.12-rc.1"
  title: "KYPO User and Group - API Reference"
host: "localhost:8084"
basePath: "/kypo-rest-user-and-group/api/v1"
tags:
- name: "groups"
- name: "roles"
- name: "users"
schemes:
- "http"
- "https"
paths:
  /groups:
    get:
      tags:
      - "groups"
      summary: "Get groups."
      description: ""
      operationId: "getGroups"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on IDMGroup entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "All groups found."
          schema:
            $ref: "#/definitions/GroupRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    post:
      tags:
      - "groups"
      summary: "Create new group."
      description: ""
      operationId: "createNewGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Group to be created."
        required: true
        schema:
          $ref: "#/definitions/NewGroupDTO"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GroupDTO"
        201:
          description: "Given group created."
          schema:
            $ref: "#/definitions/GroupDTO"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    put:
      tags:
      - "groups"
      summary: "Update group."
      description: ""
      operationId: "updateGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Group to be updated."
        required: true
        schema:
          $ref: "#/definitions/UpdateGroupDTO"
      responses:
        200:
          description: "Group updated."
        405:
          description: "Group is external and cannot be modified."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Name of the main group cannot be changed."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "groups"
      summary: "Delete groups"
      description: "Tries to deleteIDMGroup groups with given ids and returns groups\
        \ and statuses of their deletion"
      operationId: "deleteGroups"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ids of groups to be deleted."
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int64"
      responses:
        200:
          description: "Returned HTTP status OK."
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /groups/{groupId}:
    get:
      tags:
      - "groups"
      summary: "Get group with given id"
      description: ""
      operationId: "getGroupById"
      produces:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        description: "Id of group to be returned."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Group found."
          schema:
            $ref: "#/definitions/GroupDTO"
        404:
          description: "Group cannot be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "groups"
      summary: "Delete group"
      description: "Tries to deleteIDMGroup group with given id and returns if it\
        \ was successful."
      operationId: "deleteGroup"
      produces:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        description: "Id of group to be deleted."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Returned deletion status of the group."
        404:
          description: "Group cannot be found."
          schema:
            $ref: "#/definitions/ApiError"
        405:
          description: "Group cannot be deleted because it is a main group."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /groups/{groupId}/roles/{roleId}:
    put:
      tags:
      - "groups"
      summary: "Assign role to the group"
      description: ""
      operationId: "assignRoleToGroup"
      parameters:
      - name: "groupId"
        in: "path"
        description: "groupId"
        required: true
        type: "integer"
        format: "int64"
      - name: "roleId"
        in: "path"
        description: "roleId"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Role assigned to group."
        404:
          description: "Role or group cannot be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "groups"
      summary: "Remove role from the group"
      description: "Role can be removed only if it is not main role of the group."
      operationId: "removeRoleFromGroup"
      parameters:
      - name: "groupId"
        in: "path"
        description: "groupId"
        required: true
        type: "integer"
        format: "int64"
      - name: "roleId"
        in: "path"
        description: "roleId"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Role successfully removed from the group."
        404:
          description: "Group cannot be found or role cannot be found in group."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Role cannot be removed from the group because it is the main\
            \ role of the group."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /groups/{groupId}/users:
    put:
      tags:
      - "groups"
      summary: "Add users to group."
      description: ""
      operationId: "addUsersToGroup"
      consumes:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        description: "Id of group to add users."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Ids of members to be added and ids of groups of imported members\
          \ to group."
        required: true
        schema:
          $ref: "#/definitions/AddUsersToGroupDTO"
      responses:
        204:
          description: "User has been given into group."
        304:
          description: "Group is external and cannot be modified."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Group or some user cannot be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "groups"
      summary: "Remove users from the group."
      description: ""
      operationId: "removeUsers"
      parameters:
      - name: "groupId"
        in: "path"
        description: "Id of group to remove users."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Ids of members to be removed from group."
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int64"
      responses:
        204:
          description: "User has been removed from the group."
        304:
          description: "Group is external and cannot be modified."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Group or some user cannot be found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Users cannot be removed from default group or administrator\
            \ cannot remove himself."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /groups/{id}/roles:
    get:
      tags:
      - "groups"
      summary: "Returns all roles of group"
      description: ""
      operationId: "getRolesOfGroup"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on IDMGroup entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "All roles of group found."
          schema:
            $ref: "#/definitions/RoleRestResource"
        404:
          description: "Group cannot be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /roles:
    get:
      tags:
      - "roles"
      summary: "Get all roles"
      description: ""
      operationId: "getRoles"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on Role entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "All roles found."
          schema:
            $ref: "#/definitions/RoleRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /roles/users:
    get:
      tags:
      - "roles"
      summary: "Gets all users with given role type."
      description: ""
      operationId: "getUsersWithGivenRoleType"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on User entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "roleType"
        in: "query"
        description: "Type of role to getGroupById users for."
        required: true
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "Users with specific role type found."
          schema:
            $ref: "#/definitions/UserRestResource"
        404:
          description: "Role cannot be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /roles/users-not-with-ids:
    get:
      tags:
      - "roles"
      summary: "Gets all users with given role and not with given ids."
      description: "Page size cannot be higher than 1000"
      operationId: "getUsersWithGivenRoleTypeAndNotWithGivenIds"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on User entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "roleType"
        in: "query"
        description: "Type of role to getGroupById users for."
        required: true
        type: "string"
      - name: "ids"
        in: "query"
        description: "Ids of the users to be excluded from the result."
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "All roles found."
          schema:
            $ref: "#/definitions/UserRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /roles/{roleId}:
    get:
      tags:
      - "roles"
      summary: "Get role with given id"
      description: ""
      operationId: "getRole"
      produces:
      - "application/json"
      parameters:
      - name: "roleId"
        in: "path"
        description: "Id of role to be returned"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Role found."
          schema:
            $ref: "#/definitions/RoleDTO"
        404:
          description: "Role cannot be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /roles/{roleId}/users:
    get:
      tags:
      - "roles"
      summary: "Gets all users with given role ID."
      description: ""
      operationId: "getUsersWithGivenRole"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on User entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "roleId"
        in: "path"
        description: "Type of role to getGroupById users for."
        required: true
        type: "integer"
        format: "int64"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "Users with specific role ID found."
          schema:
            $ref: "#/definitions/UserRestResource"
        404:
          description: "Role cannot be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /users:
    get:
      tags:
      - "users"
      summary: "Gets all users."
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on User entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "Users found."
          schema:
            $ref: "#/definitions/UserRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    post:
      tags:
      - "users"
      summary: "Import new users."
      description: ""
      operationId: "importUsers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Object with users to be imported"
        required: true
        schema:
          $ref: "#/definitions/UsersImportDTO"
      responses:
        201:
          description: "Given group created."
          schema:
            $ref: "#/definitions/GroupDTO"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "users"
      summary: "DeleteUsers"
      description: "Delete users based on given ids."
      operationId: "deleteUsers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ids of users to be deleted."
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
            format: "int64"
      responses:
        200:
          description: "Returned HTTP status OK."
        404:
          description: "User could not be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /users/groups:
    get:
      tags:
      - "users"
      summary: "Gets users in given groups."
      description: ""
      operationId: "getUsersInGroups"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on User entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "ids"
        in: "query"
        description: "Ids of groups where users are assigned."
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "Users in specific groups found."
          schema:
            $ref: "#/definitions/UserRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /users/ids:
    get:
      tags:
      - "users"
      summary: "Gets users with given ids."
      description: "Page size cannot be higher than 1000"
      operationId: "getUsersWithGivenIds"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on User entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "ids"
        in: "query"
        description: "Ids of users to be obtained."
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "Users with given ids found."
          schema:
            $ref: "#/definitions/UserRestResource"
        404:
          description: "User could not be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /users/info:
    get:
      tags:
      - "users"
      summary: "Get user info"
      description: "Returns details of user who is logged in."
      operationId: "getUserInfo"
      parameters: []
      responses:
        200:
          description: "Base user info found."
          schema:
            $ref: "#/definitions/UserDTO"
        404:
          description: "User could not be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /users/initial-oidc-users:
    get:
      tags:
      - "users"
      summary: "Get initial oidc users"
      description: "Returns details of initial OIDC users."
      operationId: "getInitialOIDCUsers"
      produces:
      - "application/octet-stream"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
              format: "byte"
      security:
      - bearerAuth: []
  /users/not-in-groups/{groupId}:
    get:
      tags:
      - "users"
      summary: "Gets all users except users in given group."
      description: ""
      operationId: "getAllUsersNotInGivenGroup"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on User entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "groupId"
        in: "path"
        description: "Id of group whose users do not getGroupById."
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "User found."
          schema:
            $ref: "#/definitions/UserRestResource"
        404:
          description: "Some user could not be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /users/{id}/roles:
    get:
      tags:
      - "users"
      summary: "Returns all roles of user with given id."
      description: ""
      operationId: "getRolesOfUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Filtering on User entity attributes"
        required: false
        schema:
          $ref: "#/definitions/Predicate"
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "int"
        x-example: "0"
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "int"
        x-example: "20"
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "Roles of the users."
          schema:
            $ref: "#/definitions/RoleRestResource"
        404:
          description: "User could not be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /users/{userId}:
    get:
      tags:
      - "users"
      summary: "Gets user with given id."
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of user to be returned."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "User found."
          schema:
            $ref: "#/definitions/UserRestResource"
        404:
          description: "User not found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: "Delete user based on given id."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Screen name of user to be deleted."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Returned HTTP status OK."
        404:
          description: "User could not be found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
securityDefinitions:
  bearerAuth:
    description: "Obtain bearer token from OIDC provider and enter the token in the\
      \ following field. Use format 'Bearer {token}'"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  AddUsersToGroupDTO:
    type: "object"
    properties:
      idsOfUsersToBeAdd:
        type: "array"
        example: "[1,2]"
        description: "Main identifiers of users to be added to group."
        items:
          type: "integer"
          format: "int64"
      idsOfGroupsOfImportedUsers:
        type: "array"
        example: "[1,2]"
        description: "Main group identifiers whose users are to be imported into a\
          \ group."
        items:
          type: "integer"
          format: "int64"
    description: "Data that need to be provided to add users to a group."
  ApiError:
    type: "object"
    properties:
      timestamp:
        type: "integer"
        format: "int64"
        example: "1574062900 (different for each type of exception)"
        description: "The time when the exception occurred"
      status:
        type: "string"
        example: "404 Not found (different for each type of exception)."
        description: "The HTTP response status code"
        enum:
        - "CONTINUE"
        - "SWITCHING_PROTOCOLS"
        - "PROCESSING"
        - "CHECKPOINT"
        - "OK"
        - "CREATED"
        - "ACCEPTED"
        - "NON_AUTHORITATIVE_INFORMATION"
        - "NO_CONTENT"
        - "RESET_CONTENT"
        - "PARTIAL_CONTENT"
        - "MULTI_STATUS"
        - "ALREADY_REPORTED"
        - "IM_USED"
        - "MULTIPLE_CHOICES"
        - "MOVED_PERMANENTLY"
        - "FOUND"
        - "MOVED_TEMPORARILY"
        - "SEE_OTHER"
        - "NOT_MODIFIED"
        - "USE_PROXY"
        - "TEMPORARY_REDIRECT"
        - "PERMANENT_REDIRECT"
        - "BAD_REQUEST"
        - "UNAUTHORIZED"
        - "PAYMENT_REQUIRED"
        - "FORBIDDEN"
        - "NOT_FOUND"
        - "METHOD_NOT_ALLOWED"
        - "NOT_ACCEPTABLE"
        - "PROXY_AUTHENTICATION_REQUIRED"
        - "REQUEST_TIMEOUT"
        - "CONFLICT"
        - "GONE"
        - "LENGTH_REQUIRED"
        - "PRECONDITION_FAILED"
        - "PAYLOAD_TOO_LARGE"
        - "REQUEST_ENTITY_TOO_LARGE"
        - "URI_TOO_LONG"
        - "REQUEST_URI_TOO_LONG"
        - "UNSUPPORTED_MEDIA_TYPE"
        - "REQUESTED_RANGE_NOT_SATISFIABLE"
        - "EXPECTATION_FAILED"
        - "I_AM_A_TEAPOT"
        - "INSUFFICIENT_SPACE_ON_RESOURCE"
        - "METHOD_FAILURE"
        - "DESTINATION_LOCKED"
        - "UNPROCESSABLE_ENTITY"
        - "LOCKED"
        - "FAILED_DEPENDENCY"
        - "UPGRADE_REQUIRED"
        - "PRECONDITION_REQUIRED"
        - "TOO_MANY_REQUESTS"
        - "REQUEST_HEADER_FIELDS_TOO_LARGE"
        - "UNAVAILABLE_FOR_LEGAL_REASONS"
        - "INTERNAL_SERVER_ERROR"
        - "NOT_IMPLEMENTED"
        - "BAD_GATEWAY"
        - "SERVICE_UNAVAILABLE"
        - "GATEWAY_TIMEOUT"
        - "HTTP_VERSION_NOT_SUPPORTED"
        - "VARIANT_ALSO_NEGOTIATES"
        - "INSUFFICIENT_STORAGE"
        - "LOOP_DETECTED"
        - "BANDWIDTH_LIMIT_EXCEEDED"
        - "NOT_EXTENDED"
        - "NETWORK_AUTHENTICATION_REQUIRED"
      message:
        type: "string"
        example: "The IDMGroup could not be found in database (different for each\
          \ type of exception)."
        description: "The specific description of the ApiError."
      errors:
        type: "array"
        example: "[\"The requested resource was not found (different for each type\
          \ of exception).\"]"
        description: "The list of main reasons of the ApiError."
        items:
          type: "string"
      path:
        type: "string"
        example: "/kypo-rest-user-and-group/api/v1/groups/1000 (different for each\
          \ type of exception)."
        description: "The requested URI path which caused error."
  GroupDTO:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Main group of organizers"
        description: "A name of the group."
      description:
        type: "string"
        example: "Organizers group for training run in June."
        description: "A description of the group."
      roles:
        type: "array"
        description: "Set of roles of  group."
        uniqueItems: true
        items:
          $ref: "#/definitions/RoleDTO"
      users:
        type: "array"
        description: "Set of users in group."
        uniqueItems: true
        items:
          $ref: "#/definitions/UserForGroupsDTO"
      source:
        type: "string"
        example: "Internal"
        description: "Source of the group, whether its internal or from perun."
        enum:
        - "INTERNAL"
        - "PERUN"
      canBeDeleted:
        type: "boolean"
        example: false
        description: "Sign if the group can be deleted."
      expirationDate:
        type: "string"
        format: "date-time"
        example: "2017-10-19 10:23:54+02"
        description: "Time until the group is valid."
      id:
        type: "integer"
        format: "int64"
        example: 1
        position: 1
        description: "Main identifier of group."
    description: "The detailed information about a group."
  GroupRestResource:
    type: "object"
    properties:
      content:
        type: "array"
        description: "Retrieved IDMGroups from databases."
        items:
          $ref: "#/definitions/GroupViewDTO"
      pagination:
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages."
  GroupViewDTO:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Main group of organizers"
        description: "A name of the group."
      description:
        type: "string"
        example: "Organizers group for training run in June."
        description: "A description of the group."
      source:
        type: "string"
        example: "Internal"
        description: "Source of the group, whether its internal or from perun."
        enum:
        - "INTERNAL"
        - "PERUN"
      canBeDeleted:
        type: "boolean"
        example: false
        description: "Sign if the group can be deleted."
      expirationDate:
        type: "string"
        format: "date-time"
        example: "2017-10-19 10:23:54+02"
        description: "Time until the group is valid."
      id:
        type: "integer"
        format: "int64"
        example: 1
        position: 1
        description: "Main identifier of group."
    description: "The basic information about a group."
  NewGroupDTO:
    type: "object"
    required:
    - "description"
    - "name"
    properties:
      name:
        type: "string"
        example: "Main group"
        description: "A name of the group."
      description:
        type: "string"
        example: "Group for main users."
        description: "A description of the group."
      expirationDate:
        type: "string"
        format: "date-time"
        example: "2019-11-20T10:28:02.727Z"
        description: "Time until the group is valid."
      users:
        type: "array"
        description: "List of users who is assigned to group."
        uniqueItems: true
        items:
          $ref: "#/definitions/UserForGroupsDTO"
      groupIdsOfImportedUsers:
        type: "array"
        example: "[1]"
        description: "Main identifiers of group."
        items:
          type: "integer"
          format: "int64"
    description: "Data that need to be provided to create a new group."
  Pagination:
    type: "object"
    required:
    - "number"
    - "numberOfElements"
    - "size"
    - "totalElements"
    - "totalPages"
    properties:
      number:
        type: "integer"
        format: "int32"
        example: 1
        description: "Page number."
      numberOfElements:
        type: "integer"
        format: "int32"
        example: 20
        description: "Number of elements in page."
      size:
        type: "integer"
        format: "int32"
        example: 20
        description: "Page size."
      totalElements:
        type: "integer"
        format: "int64"
        example: 100
        description: "Total number of elements in this resource (in all Pages)."
      totalPages:
        type: "integer"
        format: "int32"
        example: 5
        description: "Total number of pages."
  Predicate:
    type: "object"
  Result info (Page):
    type: "object"
    required:
    - "content"
    - "pagination"
    properties:
      content:
        type: "array"
        position: 1
        description: "Content - (Retrieved data) from databases."
        items:
          type: "object"
      pagination:
        position: 2
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages"
  Result info (Page)RoleDTO:
    type: "object"
    required:
    - "content"
    - "pagination"
    properties:
      content:
        type: "array"
        position: 1
        description: "Content - (Retrieved data) from databases."
        items:
          $ref: "#/definitions/RoleDTO"
      pagination:
        position: 2
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages"
  RoleDTO:
    type: "object"
    properties:
      idOfMicroservice:
        type: "integer"
        format: "int64"
        example: 5
        description: "Id of microservice which use this role."
      nameOfMicroservice:
        type: "string"
        example: "kypo-training"
        description: "A name of microservice which use this role."
      description:
        type: "string"
        example: "This role will allow you to create and delete groups."
        description: "A description of what the user is capable of with this role."
      role_type:
        type: "string"
        example: "ROLE_USER_AND_GROUP_ADMINISTRATOR"
        description: "Role type of role."
      id:
        type: "integer"
        format: "int64"
        example: 1
        position: 1
        description: "Main identifier of the role."
    description: "The detailed information about role."
  RoleRestResource:
    type: "object"
    properties:
      content:
        type: "array"
        description: "Retrieved Roles from databases."
        items:
          $ref: "#/definitions/RoleDTO"
      pagination:
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages."
  UpdateGroupDTO:
    type: "object"
    required:
    - "description"
    - "id"
    - "name"
    properties:
      name:
        type: "string"
        example: "Main group."
        description: "A name of the group."
      description:
        type: "string"
        example: "Group for main users."
        description: "A description of the group."
      expiration_date:
        type: "string"
        format: "date-time"
        example: "2019-11-20T10:28:02.727Z"
        description: "Time until the group is valid."
      id:
        type: "integer"
        format: "int64"
        example: 1
        position: 1
        description: "Main identifier of group."
    description: "Data that need to be provided to update particular group."
  UserDTO:
    type: "object"
    properties:
      sub:
        type: "string"
        example: "mail@mail.muni.cz"
        description: "Sub of the user."
      iss:
        type: "string"
        example: "https://oidc.muni.cz"
        description: "Issuer of a user."
      fullName:
        type: "string"
        example: "John Doe"
        description: "Full name of the user."
      mail:
        type: "string"
        example: "johndoe@mail.muni.cz"
        description: "Email of the user."
      givenName:
        type: "string"
        example: "John"
        description: "First name of a user."
      familyName:
        type: "string"
        example: "Doe"
        description: "Surname of a user."
      roles:
        type: "array"
        description: "Roles of user assigned through the groups which user is in."
        uniqueItems: true
        items:
          $ref: "#/definitions/RoleDTO"
      picture:
        type: "array"
        example: "iVBORw0KGgoAAAANSUhEUgAAAEsAAABLCAYAAAA4TnrqAAACIUlEQVR4Xu3YsY0dSQxAQQUlpXT5Z3CS/YgxSrQa4gLlEOBb9pj/x6//fv7/t/78/XhN3yBWyz3kBX2DWC33kBf0DWK13ENe0DeI1XIPeUHfIFbLPeQFfYNYLfeQF/QNYrXcQ17QN4jVcg95Qd8gVss95AV9g1gt95AX9A1itdxDXtA3iNVyD3lB3yBWyz3kBX2DWC33kBf0DWLERGOiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS6z+8b/mPha4jwXuY4H7WOA+FriPBe5jgftY4D4WuI8F7mOB+1jgPha4jwXGbzbn2xicb2Nwvo3B+TYG59sYnG9jcL6Nwfk2BufbGJxvY3C+jcH5Ngbn2xicb2Nwvq1+z2pMtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3Rllgt9xDRlmhLtCVWyz1EtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3Rllgt9xDRlmhLtCVWyz1EtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3Rllgt9xDRlmhLtCVWyz1EtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3RlvgNt34wfeJElG8AAAAASUVORK5CYII="
        description: "Identicon of a user."
        items:
          type: "string"
          format: "byte"
      id:
        type: "integer"
        format: "int64"
        example: 1
        position: 1
        description: "Main identifier of the user."
    description: "Detailed information about user."
  UserForGroupsDTO:
    type: "object"
    properties:
      sub:
        type: "string"
        example: "mail@mail.muni.cz"
        description: "Sub of the user."
      iss:
        type: "string"
        example: "https://oidc.muni.cz"
        description: "Issuer of a user."
      fullName:
        type: "string"
        example: "John Doe"
        description: "Full name of the user including his titles."
      givenName:
        type: "string"
        example: "John"
        description: "First name of a user."
      familyName:
        type: "string"
        example: "Doe"
        description: "Surname of a user."
      mail:
        type: "string"
        example: "johndoe@mail.muni.cz"
        description: "Email of the user."
      picture:
        type: "array"
        example: "iVBORw0KGgoAAAANSUhEUgAAAEsAAABLCAYAAAA4TnrqAAACIUlEQVR4Xu3YsY0dSQxAQQUlpXT5Z3CS/YgxSrQa4gLlEOBb9pj/x6//fv7/t/78/XhN3yBWyz3kBX2DWC33kBf0DWK13ENe0DeI1XIPeUHfIFbLPeQFfYNYLfeQF/QNYrXcQ17QN4jVcg95Qd8gVss95AV9g1gt95AX9A1itdxDXtA3iNVyD3lB3yBWyz3kBX2DWC33kBf0DWLERGOiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS6z+8b/mPha4jwXuY4H7WOA+FriPBe5jgftY4D4WuI8F7mOB+1jgPha4jwXGbzbn2xicb2Nwvo3B+TYG59sYnG9jcL6Nwfk2BufbGJxvY3C+jcH5Ngbn2xicb2Nwvq1+z2pMtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3Rllgt9xDRlmhLtCVWyz1EtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3Rllgt9xDRlmhLtCVWyz1EtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3Rllgt9xDRlmhLtCVWyz1EtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3RlvgNt34wfeJElG8AAAAASUVORK5CYII="
        description: "Identicon of a user."
        items:
          type: "string"
          format: "byte"
      id:
        type: "integer"
        format: "int64"
        example: 1
        position: 1
        description: "Main identifiers of the user."
    description: "Encapsulates information about a user used in a given groups."
  UserImportDTO:
    type: "object"
    properties:
      sub:
        type: "string"
        example: "johndoe@ics.muni.cz"
        description: "User sub."
      iss:
        type: "string"
        example: "https://oidc.muni.cz/oidc"
        description: "OIDC issuer for that user record."
      full_name:
        type: "string"
        example: "John Doe"
        description: "User full name."
      given_name:
        type: "string"
        example: "John"
        description: "User given name."
      family_name:
        type: "string"
        example: "Doe"
        description: "User family name."
    description: "Information that are necessary to import a user."
  UserRestResource:
    type: "object"
    properties:
      content:
        type: "array"
        description: "Retrieved users from databases."
        items:
          $ref: "#/definitions/UserDTO"
      pagination:
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages."
  UsersImportDTO:
    type: "object"
    properties:
      users:
        type: "array"
        description: "List of the user to be imported."
        items:
          $ref: "#/definitions/UserImportDTO"
      groupName:
        type: "string"
        description: "New group to which the user will be assigned."
    description: "Information that are necessary to import users."
