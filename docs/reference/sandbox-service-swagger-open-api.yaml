{
  "swagger": "2.0",
  "info": { "title": "CyberRangeCZ Platform OpenStack REST API documentation", "description": "", "version": "v1" },
  "host": "localhost:8000",
  "schemes": [ "http" ],
  "basePath": "/sandbox-service/api/v1",
  "consumes": [ "application/json" ],
  "produces": [ "application/json" ],
  "securityDefinitions": { "Basic": { "type": "basic" } },
  "security": [ { "Basic": [] } ],
  "paths":
    {
      "/allocation-requests/{request_id}": { "get": { "operationId": "allocation-requests_read", "description": "Retrieve a Sandbox Allocation Request.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/AllocationRequest" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "allocation-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/allocation-requests/{request_id}/cancel": { "patch": { "operationId": "allocation-requests_cancel_partial_update", "description": "Cancel given Allocation Request. Returns no data if OK (200).", "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/AllocationRequest" } } ], "responses": { "200": { "description": "", "schema": { "description": "", "type": "object", "properties": {} } } }, "tags": [ "allocation-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/allocation-requests/{request_id}/stages/networking-ansible": { "get": { "operationId": "allocation-requests_stages_networking-ansible_read", "description": "Retrieve a `Networking Ansible` Allocation stage.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/NetworkingAnsibleAllocationStage" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "allocation-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/allocation-requests/{request_id}/stages/networking-ansible/outputs": { "get": { "operationId": "allocation-requests_stages_networking-ansible_outputs_list", "description": "Retrieve a list of Ansible Outputs.", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/AllocationAnsibleOutput" } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "allocation-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/allocation-requests/{request_id}/stages/terraform":
        {
          "get":
            {
              "operationId": "allocation-requests_stages_terraform_read",
              "description": "Retrieve an `openstack` allocation stage.

                Null `status` and `status_reason` attributes mean, that stack does not have them;

                AKA it does not exist in OpenStack.",
              "parameters": [],
              "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/TerraformAllocationStage" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "allocation-requests" ]
            },
          "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/allocation-requests/{request_id}/stages/terraform/outputs": { "get": { "operationId": "allocation-requests_stages_terraform_outputs_list", "description": "", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/AllocationTerraformOutput" } } } } } }, "tags": [ "allocation-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/allocation-requests/{request_id}/stages/user-ansible": { "get": { "operationId": "allocation-requests_stages_user-ansible_read", "description": "Retrieve a `User Ansible` Allocation stage.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/UserAnsibleAllocationStage" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "allocation-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/allocation-requests/{request_id}/stages/user-ansible/outputs": { "get": { "operationId": "allocation-requests_stages_user-ansible_outputs_list", "description": "Retrieve a list of Ansible Outputs.", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/AllocationAnsibleOutput" } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "allocation-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/cleanup-requests/{request_id}": { "get": { "operationId": "cleanup-requests_read", "description": "Retrieve a Sandbox Cleanup Request.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/CleanupRequest" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "cleanup-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/cleanup-requests/{request_id}/cancel": { "patch": { "operationId": "cleanup-requests_cancel_partial_update", "description": "Cancel given Cleanup Request. Returns no data if OK (200).", "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/CleanupRequest" } } ], "responses": { "200": { "description": "", "schema": { "description": "", "type": "object", "properties": {} } } }, "tags": [ "cleanup-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/cleanup-requests/{request_id}/stages/networking-ansible": { "get": { "operationId": "cleanup-requests_stages_networking-ansible_read", "description": "Retrieve a `Networking Ansible` Cleanup stage.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/NetworkingAnsibleCleanupStage" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "cleanup-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/cleanup-requests/{request_id}/stages/terraform": { "get": { "operationId": "cleanup-requests_stages_terraform_read", "description": "Retrieve an `openstack` Cleanup stage.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/TerraformCleanupStage" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "cleanup-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/cleanup-requests/{request_id}/stages/user-ansible": { "get": { "operationId": "cleanup-requests_stages_user-ansible_read", "description": "Retrieve a `User Ansible` Cleanup stage.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/UserAnsibleCleanupStage" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "cleanup-requests" ] }, "parameters": [ { "name": "request_id", "in": "path", "required": true, "type": "string" } ] },
      "/definitions": { "get": { "operationId": "definitions_list", "description": "Retrieve a list of sandbox definitions.", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "Successful response", "schema": { "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer" }, "total_count": { "type": "integer" }, "results": { "type": "array", "items": { "title": "Definition", "description": "Definition(id, name, url, rev, created_by)", "required": [ "url", "rev" ], "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "url": { "description": "SSH git URL of the definition", "type": "string" }, "rev": { "description": "Git revision used", "type": "string" }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } } } } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "definitions" ] }, "post": { "operationId": "definitions_create", "description": "Create a new sandbox definition. Optional parameter *rev* defaults to master.", "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "required": [ "url", "rev" ], "type": "object", "properties": { "url": { "description": "SSH git URL of the definition", "type": "string" }, "rev": { "description": "Git revision used", "type": "string" } } } } ], "responses": { "201": { "description": "", "schema": { "title": "Definition", "description": "Definition(id, name, url, rev, created_by)", "required": [ "url", "rev" ], "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "url": { "description": "SSH git URL of the definition", "type": "string" }, "rev": { "description": "Git revision used", "type": "string" }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } } } } }, "400": { "description": "Client sent invalid data.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "definitions" ] }, "parameters": [] },
      "/definitions/{definition_id}":
        {
          "get": { "operationId": "definitions_read", "description": "Retrieve the definition.", "parameters": [], "responses": { "200": { "description": "", "schema": { "title": "Definition", "description": "Definition(id, name, url, rev, created_by)", "required": [ "url", "rev" ], "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "url": { "description": "SSH git URL of the definition", "type": "string" }, "rev": { "description": "Git revision used", "type": "string" }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "definitions" ] },
          "delete":
            {
              "operationId": "definitions_delete",
              "description": "Delete the definition.

                There can't exist a pool associated with this definition or delete fails.",
              "parameters": [],
              "responses": { "204": { "description": "" }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "definitions" ]
            },
          "parameters": [ { "name": "definition_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/definitions/{definition_id}/local-variables": { "post": { "operationId": "definitions_local-variables_create", "description": "Generate variables for local sandboxes, send it to answers-storage.", "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/LocalSandboxVariables" } } ], "responses": { "201": { "description": "", "schema": { "description": "", "type": "array", "items": { "$ref": "#/definitions/LocalVariable" } } } }, "tags": [ "definitions" ] }, "parameters": [ { "name": "definition_id", "in": "path", "required": true, "type": "string" } ] },
      "/definitions/{definition_id}/refs": { "get": { "operationId": "definitions_refs_list", "description": "Retrieve a list of definition refs (branches and tags).", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/DefinitionRev" } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "definitions" ] }, "parameters": [ { "name": "definition_id", "in": "path", "required": true, "type": "string" } ] },
      "/definitions/{definition_id}/topology": { "get": { "operationId": "definitions_topology_read", "description": "Retrieve topology visualisation data from TopologyDefinition", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/Topology" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "definitions" ] }, "parameters": [ { "name": "definition_id", "in": "path", "required": true, "type": "string" } ] },
      "/definitions/{definition_id}/variables":
        {
          "get":
            {
              "operationId": "definitions_variables_list",
              "description": "Retrieve APG variables from TopologyDefinition, empty list if variables.yml was not

                found.",
              "parameters": [],
              "responses": { "200": { "description": "" }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "definitions" ]
            },
          "parameters": [ { "name": "definition_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/images": { "get": { "operationId": "images_list", "description": "Get list of images.", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" }, { "name": "name", "in": "query", "type": "string" }, { "name": "os_distro", "in": "query", "type": "string" }, { "name": "os_type", "in": "query", "type": "string" }, { "name": "visibility", "in": "query", "type": "string" }, { "name": "default_user", "in": "query", "type": "string" }, { "name": "crczp", "in": "query", "description": "Returns only images with the attribute owner_specified.openstack.created_by set to onlyCustom", "type": "boolean", "default": false }, { "name": "GUI", "in": "query", "description": "Returns only images with the attribute owner_specified.openstack.gui_accessset to true", "type": "boolean", "default": false }, { "name": "cached", "in": "query", "description": "Performs the faster version of this endpoint but does retrieve a fresh list of images.", "type": "boolean", "default": false } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/Image" } } } } } }, "tags": [ "cloud" ] }, "parameters": [] },
      "/info": { "get": { "operationId": "info_read", "description": "Get the quota set and name of project.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/QuotaSet" } } }, "tags": [ "cloud" ] }, "parameters": [] },
      "/limits": { "get": { "operationId": "limits_read", "description": "Get Absolute limits of OpenStack project.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/ProjectLimits" } } }, "tags": [ "cloud" ] }, "parameters": [] },
      "/pools":
        {
          "get": { "operationId": "pools_list", "description": "Get a list of pools.", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "Successful response", "schema": { "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer" }, "total_count": { "type": "integer" }, "results": { "type": "array", "items": { "title": "Pool", "description": "Pool(id, definition, max_size, size, private_management_key, public_management_key, management_certificate, uuid, rev, rev_sha, created_by)", "required": [ "definition_id", "max_size" ], "type": "object", "properties": { "id": { "type": "integer", "readOnly": true }, "definition_id": { "description": "Sandbox definition ID", "type": "integer" }, "size": { "description": "Current number of SandboxAllocationUnits", "type": "integer", "readOnly": true, "default": 0 }, "max_size": { "description": "Maximum number of SandboxAllocationUnits", "type": "integer" }, "lock_id": { "type": "integer", "readOnly": true }, "rev": { "description": "Name of used git branch", "type": "string", "readOnly": true }, "rev_sha": { "description": "SHA of used git branch", "type": "string", "readOnly": true }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } }, "hardware_usage": { "type": "object", "properties": { "vcpu": { "type": "string" }, "ram": { "type": "string" }, "instances": { "type": "string" }, "network": { "type": "string" }, "subnet": { "type": "string" }, "port": { "type": "string" } } }, "definition": { "title": "Definition", "description": "Definition(id, name, url, rev, created_by)", "required": [ "url", "rev" ], "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "url": { "description": "SSH git URL of the definition", "type": "string" }, "rev": { "description": "Git revision used", "type": "string" }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } } } } } } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] },
          "post":
            {
              "operationId": "pools_create",
              "description": "Creates new pool.

                Also creates a new key-pair and certificate, which is then passed to terraform client.

                The key is then used as management key for this pool, which means that the management

                \ key-pair is the same for each sandbox in the pool.",
              "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "required": [ "definition_id", "max_size" ], "type": "object", "properties": { "definition_id": { "description": "Sandbox definition ID", "type": "integer" }, "max_size": { "description": "Maximum number of SandboxAllocationUnits", "type": "integer" } } } } ],
              "responses": { "201": { "description": "", "schema": { "title": "Pool", "description": "Pool(id, definition, max_size, size, private_management_key, public_management_key, management_certificate, uuid, rev, rev_sha, created_by)", "required": [ "definition_id", "max_size" ], "type": "object", "properties": { "id": { "type": "integer", "readOnly": true }, "definition_id": { "description": "Sandbox definition ID", "type": "integer" }, "size": { "description": "Current number of SandboxAllocationUnits", "type": "integer", "readOnly": true, "default": 0 }, "max_size": { "description": "Maximum number of SandboxAllocationUnits", "type": "integer" }, "lock_id": { "type": "integer", "readOnly": true }, "rev": { "description": "Name of used git branch", "type": "string", "readOnly": true }, "rev_sha": { "description": "SHA of used git branch", "type": "string", "readOnly": true }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } }, "hardware_usage": { "type": "object", "properties": { "vcpu": { "type": "string" }, "ram": { "type": "string" }, "instances": { "type": "string" }, "network": { "type": "string" }, "subnet": { "type": "string" }, "port": { "type": "string" } } }, "definition": { "title": "Definition", "description": "Definition(id, name, url, rev, created_by)", "required": [ "url", "rev" ], "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "url": { "description": "SSH git URL of the definition", "type": "string" }, "rev": { "description": "Git revision used", "type": "string" }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } } } } } } }, "400": { "description": "Client sent invalid data.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "pools" ]
            },
          "parameters": []
        },
      "/pools/{pool_id}":
        {
          "get": { "operationId": "pools_read", "description": "Retrieve a pool.", "parameters": [], "responses": { "200": { "description": "", "schema": { "title": "Pool", "description": "Pool(id, definition, max_size, size, private_management_key, public_management_key, management_certificate, uuid, rev, rev_sha, created_by)", "required": [ "definition_id", "max_size" ], "type": "object", "properties": { "id": { "type": "integer", "readOnly": true }, "definition_id": { "description": "Sandbox definition ID", "type": "integer" }, "size": { "description": "Current number of SandboxAllocationUnits", "type": "integer", "readOnly": true, "default": 0 }, "max_size": { "description": "Maximum number of SandboxAllocationUnits", "type": "integer" }, "lock_id": { "type": "integer", "readOnly": true }, "rev": { "description": "Name of used git branch", "type": "string", "readOnly": true }, "rev_sha": { "description": "SHA of used git branch", "type": "string", "readOnly": true }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } }, "hardware_usage": { "type": "object", "properties": { "vcpu": { "type": "string" }, "ram": { "type": "string" }, "instances": { "type": "string" }, "network": { "type": "string" }, "subnet": { "type": "string" }, "port": { "type": "string" } } }, "definition": { "title": "Definition", "description": "Definition(id, name, url, rev, created_by)", "required": [ "url", "rev" ], "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "url": { "description": "SSH git URL of the definition", "type": "string" }, "rev": { "description": "Git revision used", "type": "string" }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } } } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] },
          "delete":
            {
              "operationId": "pools_delete",
              "description": "Delete pool. The pool must be empty.

                First delete all sandboxes in given Pool.",
              "parameters": [],
              "responses": { "204": { "description": "" }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "pools" ]
            },
          "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/pools/{pool_id}/allocation-requests": { "get": { "operationId": "pools_allocation-requests_list", "description": "List Allocation Request for this pool.", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/AllocationRequest" } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] }, "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ] },
      "/pools/{pool_id}/cleanup-failed":
        {
          "post":
            {
              "operationId": "pools_cleanup-failed_create",
              "description": "Deletes all failed sandboxes in a pool. With an optional parameter *force*, it forces

                the deletion.",
              "parameters": [ { "name": "force", "in": "query", "description": "Force the deletion of sandboxes", "type": "boolean", "default": false } ],
              "responses": { "201": { "description": "" } },
              "tags": [ "pools" ]
            },
          "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/pools/{pool_id}/cleanup-requests":
        {
          "get": { "operationId": "pools_cleanup-requests_list", "description": "List Cleanup Requests for this pool.", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/CleanupRequest" } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] },
          "post":
            {
              "operationId": "pools_cleanup-requests_create",
              "description": "Deletes all sandboxes in the pool. With an optional parameter *force*,

                it forces the deletion.",
              "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/CleanupRequest" } }, { "name": "force", "in": "query", "description": "Force the deletion of sandboxes", "type": "boolean", "default": false } ],
              "responses": { "201": { "description": "", "schema": { "$ref": "#/definitions/CleanupRequest" } } },
              "tags": [ "pools" ]
            },
          "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/pools/{pool_id}/cleanup-unlocked":
        {
          "post":
            {
              "operationId": "pools_cleanup-unlocked_create",
              "description": "Deletes all unlocked sandboxes in a pool. With an optional parameter *force*, it forces

                the deletion.",
              "parameters": [ { "name": "force", "in": "query", "description": "Force the deletion of sandboxes", "type": "boolean", "default": false } ],
              "responses": { "201": { "description": "" } },
              "tags": [ "pools" ]
            },
          "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/pools/{pool_id}/definition": { "get": { "operationId": "pools_definition_read", "description": "Retrieve the definition associated with a pool.", "parameters": [], "responses": { "200": { "description": "", "schema": { "title": "Definition", "description": "Definition(id, name, url, rev, created_by)", "required": [ "url", "rev" ], "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "url": { "description": "SSH git URL of the definition", "type": "string" }, "rev": { "description": "Git revision used", "type": "string" }, "created_by": { "description": "User that created this object", "type": "object", "properties": { "id": { "type": "integer" }, "sub": { "type": "string" }, "full_name": { "type": "string" }, "given_name": { "type": "string" }, "family_name": { "type": "string" }, "mail": { "type": "string" } } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] }, "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ] },
      "/pools/{pool_id}/locks": { "get": { "operationId": "pools_locks_list", "description": "", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/PoolLock" } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] }, "post": { "operationId": "pools_locks_create", "description": "Lock given pool.", "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/PoolLock" } } ], "responses": { "201": { "description": "", "schema": { "$ref": "#/definitions/PoolLock" } }, "400": { "description": "Client sent invalid data.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] }, "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ] },
      "/pools/{pool_id}/locks/{lock_id}": { "get": { "operationId": "pools_locks_read", "description": "Retrieve details about given lock.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/PoolLock" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] }, "delete": { "operationId": "pools_locks_delete", "description": "Delete given lock.", "parameters": [], "responses": { "204": { "description": "" } }, "tags": [ "pools" ] }, "parameters": [ { "name": "lock_id", "in": "path", "required": true, "type": "string" }, { "name": "pool_id", "in": "path", "required": true, "type": "string" } ] },
      "/pools/{pool_id}/management-ssh-access":
        {
          "get":
            {
              "operationId": "pools_management-ssh-access_list",
              "description": "Generate SSH config for User access to this sandbox.

                Some values are user specific, the config contains placeholders for them.",
              "parameters": [],
              "responses": { "200": { "description": "" }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "pools" ]
            },
          "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/pools/{pool_id}/sandbox-allocation-units":
        {
          "get": { "operationId": "pools_sandbox-allocation-units_list", "description": "Get a list of Sandbox Allocation Units.", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/SandboxAllocationUnit" } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] },
          "post":
            {
              "operationId": "pools_sandbox-allocation-units_create",
              "description": "Create Sandbox Allocation Unit.

                For each Allocation Unit the Allocation Request is created in given pool.

                If count is not specified, builds *max_size - current size*.

                Query Parameters:

                - *count:* How many sandboxes to build. Optional (defaults to max_size - current size).",
              "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/SandboxAllocationUnit" } }, { "name": "count", "in": "query", "description": "Sandbox count parameter", "type": "integer" } ],
              "responses": { "201": { "description": "", "schema": { "description": "", "type": "array", "items": { "$ref": "#/definitions/SandboxAllocationUnit" } } }, "400": { "description": "Client sent invalid data.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "pools" ]
            },
          "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/pools/{pool_id}/sandboxes": { "get": { "operationId": "pools_sandboxes_list", "description": "", "parameters": [ { "name": "page", "in": "query", "description": "A page number within the paginated result set.", "required": false, "type": "integer" }, { "name": "page_size", "in": "query", "description": "Number of results to return per page.", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Attribute used to sort result set", "required": false, "type": "string" }, { "name": "order", "in": "query", "description": "Sort order", "required": false, "type": "string" } ], "responses": { "200": { "description": "", "schema": { "required": [ "results", "count" ], "type": "object", "properties": { "page": { "type": "integer" }, "page_size": { "type": "integer" }, "page_count": { "type": "integer" }, "count": { "type": "integer", "format": "uri" }, "total_count": { "type": "integer", "format": "uri" }, "results": { "type": "array", "items": { "$ref": "#/definitions/Sandbox" } } } } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] }, "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ] },
      "/pools/{pool_id}/sandboxes/get-and-lock": { "get": { "operationId": "pools_sandboxes_get-and-lock_read", "description": "Get unlocked sandbox in given pool and lock it. Return 409 if all are locked.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/Sandbox" } }, "409": { "description": "No free sandboxes; all sandboxes are locked.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "400": { "description": "Client sent invalid data.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "pools" ] }, "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ] },
      "/pools/{pool_id}/variables":
        {
          "get":
            {
              "operationId": "pools_variables_list",
              "description": "Retrieve APG variables from sandbox definition of this pool, empty list if variables.yml

                was not found.",
              "parameters": [],
              "responses": { "200": { "description": "" }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "pools" ]
            },
          "parameters": [ { "name": "pool_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/sandbox-allocation-units/{unit_id}": { "get": { "operationId": "sandbox-allocation-units_read", "description": "Retrieve a Sandbox Allocation Unit.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/SandboxAllocationUnit" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "sandbox-allocation-units" ] }, "parameters": [ { "name": "unit_id", "in": "path", "required": true, "type": "string" } ] },
      "/sandbox-allocation-units/{unit_id}/allocation-request":
        {
          "get":
            {
              "operationId": "sandbox-allocation-units_allocation-request_read",
              "description": "Retrieve a Sandbox Allocation Request for an Allocation Unit.

                Each Allocation Unit has exactly one Allocation Request.

                (There may occur a situation where it has none, then it returns 404.)",
              "parameters": [],
              "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/AllocationRequest" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "sandbox-allocation-units" ]
            },
          "parameters": [ { "name": "unit_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/sandbox-allocation-units/{unit_id}/allocation-stages/restart": { "patch": { "operationId": "sandbox-allocation-units_allocation-stages_restart_partial_update", "description": "Restart all failed sandbox allocation stages.", "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/SandboxAllocationUnit" } } ], "responses": { "201": { "description": "", "schema": { "$ref": "#/definitions/SandboxAllocationUnit" } }, "400": { "description": "Client sent invalid data.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "sandbox-allocation-units" ] }, "parameters": [ { "name": "unit_id", "in": "path", "required": true, "type": "string" } ] },
      "/sandbox-allocation-units/{unit_id}/cleanup-request":
        {
          "get":
            {
              "operationId": "sandbox-allocation-units_cleanup-request_read",
              "description": "Retrieve a Sandbox Cleanup Request for an Allocation Unit.

                Each Allocation Unit has at most one Cleanup Request.

                If it has none, then it returns 404.",
              "parameters": [],
              "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/CleanupRequest" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "sandbox-allocation-units" ]
            },
          "post": { "operationId": "sandbox-allocation-units_cleanup-request_create", "description": "Create cleanup request.", "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/CleanupRequest" } } ], "responses": { "201": { "description": "", "schema": { "$ref": "#/definitions/CleanupRequest" } } }, "tags": [ "sandbox-allocation-units" ] },
          "delete": { "operationId": "sandbox-allocation-units_cleanup-request_delete", "description": "Delete cleanup request. Must be finished or cancelled.", "parameters": [], "responses": { "204": { "description": "" } }, "tags": [ "sandbox-allocation-units" ] },
          "parameters": [ { "name": "unit_id", "in": "path", "required": true, "type": "string" } ]
        },
      "/sandbox-allocation-units/{unit_id}/lock": { "get": { "operationId": "sandbox-allocation-units_lock_read", "description": "Retrieve lock for given sandbox allocation unit if its sandbox exists.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/SandboxLock" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "sandbox-allocation-units" ] }, "post": { "operationId": "sandbox-allocation-units_lock_create", "description": "Lock sandbox of given sandbox allocation unit if the sandbox exists.", "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/SandboxLock" } } ], "responses": { "201": { "description": "", "schema": { "$ref": "#/definitions/SandboxLock" } }, "400": { "description": "Client sent invalid data.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "sandbox-allocation-units" ] }, "delete": { "operationId": "sandbox-allocation-units_lock_delete", "description": "Delete lock of given sandbox allocation unit if it has sandbox.", "parameters": [], "responses": { "204": { "description": "" } }, "tags": [ "sandbox-allocation-units" ] }, "parameters": [ { "name": "unit_id", "in": "path", "required": true, "type": "string" } ] },
      "/sandboxes/{sandbox_uuid}": { "get": { "operationId": "sandboxes_read", "description": "Retrieve a sandbox.", "parameters": [], "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/Sandbox" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "sandboxes" ] }, "parameters": [ { "name": "sandbox_uuid", "in": "path", "required": true, "type": "string" } ] },
      "/sandboxes/{sandbox_uuid}/consoles":
        {
          "get":
            {
              "operationId": "sandboxes_consoles_list",
              "description": "Retrieve spice console urls for all machines in the topology. Returns 202 if

                consoles are not ready yet.",
              "parameters": [],
              "responses": { "200": { "description": "" }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "sandboxes" ]
            },
          "parameters": [ { "name": "sandbox_uuid", "in": "path", "required": true, "type": "string" } ]
        },
      "/sandboxes/{sandbox_uuid}/man-out-port-ip": { "get": { "operationId": "sandboxes_man-out-port-ip_list", "description": "Retrieve a man out port ip address.", "parameters": [], "responses": { "200": { "description": "" }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } }, "tags": [ "sandboxes" ] }, "parameters": [ { "name": "sandbox_uuid", "in": "path", "required": true, "type": "string" } ] },
      "/sandboxes/{sandbox_uuid}/topology":
        {
          "get":
            {
              "operationId": "sandboxes_topology_read",
              "description": "Get topology data for given sandbox.

                Hosts specified as hidden are filtered out, but the network is still visible.",
              "parameters": [],
              "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/Topology" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "sandboxes" ]
            },
          "parameters": [ { "name": "sandbox_uuid", "in": "path", "required": true, "type": "string" } ]
        },
      "/sandboxes/{sandbox_uuid}/user-ssh-access":
        {
          "get":
            {
              "operationId": "sandboxes_user-ssh-access_list",
              "description": "Generate SSH config for User access to this sandbox.

                Some values are user specific, the config contains placeholders for them.",
              "parameters": [],
              "responses": { "200": { "description": "" }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "sandboxes" ]
            },
          "parameters": [ { "name": "sandbox_uuid", "in": "path", "required": true, "type": "string" } ]
        },
      "/sandboxes/{sandbox_uuid}/vms/{vm_name}":
        {
          "get":
            {
              "operationId": "sandboxes_vms_read",
              "description": "Retrieve a VM info.

                Important Statuses:

                - ACTIVE (vm is active and running)

                - REBOOT (vm rebooting)

                - SUSPENDED (vm suspended)

                - ... https://developer.openstack.org/api-guide/compute/server_concepts.html#server-status",
              "parameters": [],
              "responses": { "200": { "description": "", "schema": { "$ref": "#/definitions/Node" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "sandboxes" ]
            },
          "patch":
            {
              "operationId": "sandboxes_vms_partial_update",
              "description": "Perform specified action on given VM.

                Available actions are:

                - suspend

                - resume

                - reboot",
              "parameters": [ { "name": "data", "in": "body", "required": true, "schema": { "$ref": "#/definitions/NodeAction" } } ],
              "responses": { "200": { "description": "", "schema": { "description": "", "type": "object", "properties": {} } }, "400": { "description": "Client sent invalid data.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "sandboxes" ]
            },
          "parameters": [ { "name": "sandbox_uuid", "in": "path", "required": true, "type": "string" }, { "name": "vm_name", "in": "path", "required": true, "type": "string" } ]
        },
      "/sandboxes/{sandbox_uuid}/vms/{vm_name}/console":
        {
          "get":
            {
              "operationId": "sandboxes_vms_console_list",
              "description": "Get a console for given machine. It is active for 2 hours.

                But when the connection is active, it does not disconnect.",
              "parameters": [],
              "responses": { "200": { "description": "" }, "401": { "description": "Authentication failed.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "403": { "description": "You do not have permission to perform this action.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "404": { "description": "Resource not found.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } }, "500": { "description": "Server encountered an unexpected error.", "schema": { "$ref": "#/definitions/ErrorSerilizer" } } },
              "tags": [ "sandboxes" ]
            },
          "parameters": [ { "name": "sandbox_uuid", "in": "path", "required": true, "type": "string" }, { "name": "vm_name", "in": "path", "required": true, "type": "string" } ]
        }
    },
  "definitions": { "AllocationRequest": { "description": "AllocationRequest(id, created, allocation_unit)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "allocation_unit_id": { "title": "Allocation unit id", "type": "integer", "readOnly": true }, "created": { "title": "Created", "type": "string", "format": "date-time", "readOnly": true }, "stages": { "title": "Stages", "type": "string", "readOnly": true } } }, "ErrorSerilizer": { "description": "Serializer for error responses.", "required": [ "detail" ], "type": "object", "properties": { "detail": { "title": "Detail", "description": "String message describing the error.", "type": "string", "minLength": 1 } } }, "NetworkingAnsibleAllocationStage": { "description": "NetworkingAnsibleAllocationStage(id, start, end, failed, error_message, finished, allocation_request_fk_many, allocationstage_ptr, repo_url, rev, allocation_request)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "request_id": { "title": "Request id", "type": "integer", "readOnly": true }, "start": { "title": "Start", "description": "Timestamp indicating when the stage execution started.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "end": { "title": "End", "description": "Timestamp indicating when the stage execution ended.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "failed": { "title": "Failed", "description": "Indicates whether the stage execution failed.", "type": "boolean", "readOnly": true }, "error_message": { "title": "Error message", "description": "Error message describing the potential error.", "type": "string", "readOnly": true, "minLength": 1, "x-nullable": true }, "repo_url": { "title": "Repo url", "description": "URL of the Ansible repository.", "type": "string", "readOnly": true, "minLength": 1 }, "rev": { "title": "Rev", "description": "Revision of the Ansible repository.", "type": "string", "readOnly": true, "minLength": 1 } } }, "AllocationAnsibleOutput": { "description": "AllocationAnsibleOutput(id, content, allocation_stage)", "type": "object", "properties": { "content": { "title": "Content", "type": "string", "readOnly": true, "minLength": 1 } } }, "TerraformAllocationStage": { "description": "StackAllocationStage(id, start, end, failed, error_message, finished, allocation_request_fk_many, allocationstage_ptr, allocation_request, status, status_reason)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "request_id": { "title": "Request id", "type": "integer", "readOnly": true }, "start": { "title": "Start", "description": "Timestamp indicating when the stage execution started.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "end": { "title": "End", "description": "Timestamp indicating when the stage execution ended.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "failed": { "title": "Failed", "description": "Indicates whether the stage execution failed.", "type": "boolean", "readOnly": true }, "error_message": { "title": "Error message", "description": "Error message describing the potential error.", "type": "string", "readOnly": true, "minLength": 1, "x-nullable": true }, "status": { "title": "Status", "description": "Stack status", "type": "string", "readOnly": true, "minLength": 1, "x-nullable": true }, "status_reason": { "title": "Status reason", "description": "Stack status reason", "type": "string", "readOnly": true, "minLength": 1, "x-nullable": true } } }, "AllocationTerraformOutput": { "description": "AllocationTerraformOutput(id, content, allocation_stage)", "type": "object", "properties": { "content": { "title": "Content", "type": "string", "readOnly": true, "minLength": 1 } } }, "UserAnsibleAllocationStage": { "description": "UserAnsibleAllocationStage(id, start, end, failed, error_message, finished, allocation_request_fk_many, allocationstage_ptr, repo_url, rev, allocation_request)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "request_id": { "title": "Request id", "type": "integer", "readOnly": true }, "start": { "title": "Start", "description": "Timestamp indicating when the stage execution started.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "end": { "title": "End", "description": "Timestamp indicating when the stage execution ended.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "failed": { "title": "Failed", "description": "Indicates whether the stage execution failed.", "type": "boolean", "readOnly": true }, "error_message": { "title": "Error message", "description": "Error message describing the potential error.", "type": "string", "readOnly": true, "minLength": 1, "x-nullable": true }, "repo_url": { "title": "Repo url", "description": "URL of the Ansible repository.", "type": "string", "readOnly": true, "minLength": 1 }, "rev": { "title": "Rev", "description": "Revision of the Ansible repository.", "type": "string", "readOnly": true, "minLength": 1 } } }, "CleanupRequest": { "description": "CleanupRequest(id, created, allocation_unit)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "allocation_unit_id": { "title": "Allocation unit id", "type": "integer", "readOnly": true }, "created": { "title": "Created", "type": "string", "format": "date-time", "readOnly": true }, "stages": { "title": "Stages", "type": "string", "readOnly": true } } }, "NetworkingAnsibleCleanupStage": { "description": "NetworkingAnsibleCleanupStage(id, start, end, failed, error_message, finished, cleanup_request_fk_many, cleanupstage_ptr, cleanup_request)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "request_id": { "title": "Request id", "type": "integer", "readOnly": true }, "start": { "title": "Start", "description": "Timestamp indicating when the stage execution started.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "end": { "title": "End", "description": "Timestamp indicating when the stage execution ended.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "failed": { "title": "Failed", "description": "Indicates whether the stage execution failed.", "type": "boolean", "readOnly": true }, "error_message": { "title": "Error message", "description": "Error message describing the potential error.", "type": "string", "readOnly": true, "minLength": 1, "x-nullable": true }, "allocation_stage_id": { "title": "Allocation stage id", "type": "string", "readOnly": true } } }, "TerraformCleanupStage": { "description": "StackCleanupStage(id, start, end, failed, error_message, finished, cleanup_request_fk_many, cleanupstage_ptr, cleanup_request)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "request_id": { "title": "Request id", "type": "integer", "readOnly": true }, "start": { "title": "Start", "description": "Timestamp indicating when the stage execution started.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "end": { "title": "End", "description": "Timestamp indicating when the stage execution ended.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "failed": { "title": "Failed", "description": "Indicates whether the stage execution failed.", "type": "boolean", "readOnly": true }, "error_message": { "title": "Error message", "description": "Error message describing the potential error.", "type": "string", "readOnly": true, "minLength": 1, "x-nullable": true }, "allocation_stage_id": { "title": "Allocation stage id", "type": "string", "readOnly": true } } }, "UserAnsibleCleanupStage": { "description": "UserAnsibleCleanupStage(id, start, end, failed, error_message, finished, cleanup_request_fk_many, cleanupstage_ptr, cleanup_request)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "request_id": { "title": "Request id", "type": "integer", "readOnly": true }, "start": { "title": "Start", "description": "Timestamp indicating when the stage execution started.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "end": { "title": "End", "description": "Timestamp indicating when the stage execution ended.", "type": "string", "format": "date-time", "readOnly": true, "x-nullable": true }, "failed": { "title": "Failed", "description": "Indicates whether the stage execution failed.", "type": "boolean", "readOnly": true }, "error_message": { "title": "Error message", "description": "Error message describing the potential error.", "type": "string", "readOnly": true, "minLength": 1, "x-nullable": true }, "allocation_stage_id": { "title": "Allocation stage id", "type": "string", "readOnly": true } } }, "LocalSandboxVariables": { "description": "", "required": [ "user_id", "access_token" ], "type": "object", "properties": { "user_id": { "title": "User id", "type": "integer" }, "access_token": { "title": "Access token", "type": "string", "minLength": 1 } } }, "LocalVariable": { "description": "", "required": [ "name", "type", "min", "max", "length", "prohibited" ], "type": "object", "properties": { "name": { "title": "Name", "type": "string", "minLength": 1 }, "type": { "title": "Type", "type": "string", "minLength": 1 }, "generated_value": { "title": "Generated value", "type": "string", "readOnly": true, "minLength": 1 }, "min": { "title": "Min", "type": "string", "minLength": 1 }, "max": { "title": "Max", "type": "string", "minLength": 1 }, "length": { "title": "Length", "type": "integer" }, "prohibited": { "description": "", "type": "array", "items": { "type": "string" } } } }, "DefinitionRev": { "description": "", "required": [ "name" ], "type": "object", "properties": { "name": { "title": "Name", "type": "string", "minLength": 1 } } }, "LibSpecialNode": { "description": "", "required": [ "name" ], "type": "object", "properties": { "name": { "title": "Name", "type": "string", "minLength": 1 } } }, "Host": { "description": "CRCZP OS lib Host and Router topology serializer", "required": [ "name", "os_type", "gui_access", "containers" ], "type": "object", "properties": { "name": { "title": "Name", "type": "string", "minLength": 1 }, "os_type": { "title": "Os type", "type": "string", "minLength": 1 }, "gui_access": { "title": "Gui access", "type": "boolean" }, "containers": { "description": "", "type": "array", "items": { "type": "string", "minLength": 1 } } } }, "Router": { "description": "CRCZP OS lib Host and Router topology serializer", "required": [ "name", "os_type", "gui_access" ], "type": "object", "properties": { "name": { "title": "Name", "type": "string", "minLength": 1 }, "os_type": { "title": "Os type", "type": "string", "minLength": 1 }, "gui_access": { "title": "Gui access", "type": "boolean" } } }, "LibNetwork": { "description": "CRCZP OS lib Network topology serializer", "required": [ "name", "cidr" ], "type": "object", "properties": { "name": { "title": "Name", "type": "string", "minLength": 1 }, "cidr": { "title": "Cidr", "type": "string", "minLength": 1 } } }, "Link": { "description": "", "type": "object", "properties": { "port_a": { "title": "Port a", "type": "string", "readOnly": true }, "port_b": { "title": "Port b", "type": "string", "readOnly": true } } }, "Port": { "description": "", "required": [ "ip", "mac", "parent", "name" ], "type": "object", "properties": { "ip": { "title": "Ip", "type": "string", "minLength": 1 }, "mac": { "title": "Mac", "type": "string", "minLength": 1 }, "parent": { "title": "Parent", "type": "string", "minLength": 1 }, "name": { "title": "Name", "type": "string", "minLength": 1 } } }, "Topology": { "description": "Serializer for topology", "required": [ "special_nodes", "hosts", "routers", "switches", "links", "ports" ], "type": "object", "properties": { "special_nodes": { "description": "", "type": "array", "items": { "$ref": "#/definitions/LibSpecialNode" } }, "hosts": { "description": "", "type": "array", "items": { "$ref": "#/definitions/Host" } }, "routers": { "description": "", "type": "array", "items": { "$ref": "#/definitions/Router" } }, "switches": { "description": "", "type": "array", "items": { "$ref": "#/definitions/LibNetwork" } }, "links": { "description": "", "type": "array", "items": { "$ref": "#/definitions/Link" } }, "ports": { "description": "", "type": "array", "items": { "$ref": "#/definitions/Port" } } } }, "Image": { "description": "", "required": [ "os_distro", "os_type", "disk_format", "container_format", "visibility", "status", "min_ram", "min_disk", "created_at", "updated_at", "tags", "default_user", "name" ], "type": "object", "properties": { "os_distro": { "title": "Os distro", "type": "string", "minLength": 1 }, "os_type": { "title": "Os type", "type": "string", "minLength": 1 }, "disk_format": { "title": "Disk format", "type": "string", "minLength": 1 }, "container_format": { "title": "Container format", "type": "string", "minLength": 1 }, "visibility": { "title": "Visibility", "type": "string", "minLength": 1 }, "size": { "title": "Size", "type": "integer", "readOnly": true }, "status": { "title": "Status", "type": "string", "minLength": 1 }, "min_ram": { "title": "Min ram", "type": "integer" }, "min_disk": { "title": "Min disk", "type": "integer" }, "created_at": { "title": "Created at", "type": "string", "minLength": 1 }, "updated_at": { "title": "Updated at", "type": "string", "minLength": 1 }, "tags": { "description": "", "type": "array", "items": { "type": "string" } }, "default_user": { "title": "Default user", "type": "string", "minLength": 1 }, "name": { "title": "Name", "type": "string", "minLength": 1 }, "owner_specified": { "title": "Owner specified", "type": "object", "readOnly": true } } }, "Quota": { "title": "Vcpu", "description": "", "required": [ "limit", "in_use" ], "type": "object", "properties": { "limit": { "title": "Limit", "type": "number" }, "in_use": { "title": "In use", "type": "number" } } }, "QuotaSet": { "description": "", "required": [ "vcpu", "ram", "instances", "network", "subnet", "port" ], "type": "object", "properties": { "vcpu": { "$ref": "#/definitions/Quota" }, "ram": { "$ref": "#/definitions/Quota" }, "instances": { "$ref": "#/definitions/Quota" }, "network": { "$ref": "#/definitions/Quota" }, "subnet": { "$ref": "#/definitions/Quota" }, "port": { "$ref": "#/definitions/Quota" } } }, "ProjectLimits": { "description": "", "required": [ "vcpu", "ram", "instances", "network", "subnet", "port" ], "type": "object", "properties": { "vcpu": { "title": "Vcpu", "type": "integer" }, "ram": { "title": "Ram", "type": "number" }, "instances": { "title": "Instances", "type": "integer" }, "network": { "title": "Network", "type": "integer" }, "subnet": { "title": "Subnet", "type": "integer" }, "port": { "title": "Port", "type": "integer" } } }, "PoolLock": { "description": "PoolLock(id, pool)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "pool_id": { "title": "Pool id", "type": "integer", "readOnly": true } } }, "SandboxAllocationUnit": { "description": "SandboxAllocationUnit(id, pool, created_by)", "required": [ "cleanup_request" ], "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "pool_id": { "title": "Pool id", "type": "integer", "readOnly": true }, "allocation_request": { "$ref": "#/definitions/AllocationRequest" }, "cleanup_request": { "$ref": "#/definitions/CleanupRequest" }, "created_by": { "title": "Created by", "type": "string", "readOnly": true }, "locked": { "title": "Locked", "type": "string", "readOnly": true } } }, "Sandbox": { "description": "Sandbox(id, allocation_unit, private_user_key, public_user_key)", "type": "object", "properties": { "id": { "title": "Id", "type": "string", "readOnly": true, "minLength": 1 }, "lock_id": { "title": "Lock id", "type": "integer", "readOnly": true }, "allocation_unit_id": { "title": "Allocation unit id", "type": "integer", "readOnly": true } } }, "SandboxLock": { "description": "SandboxLock(id, sandbox, created_by)", "type": "object", "properties": { "id": { "title": "ID", "type": "integer", "readOnly": true }, "sandbox_id": { "title": "Sandbox id", "type": "string", "readOnly": true }, "created_by": { "title": "Created by", "description": "The user that created this lock.", "type": "integer", "readOnly": true, "x-nullable": true } } }, "Node": { "description": "CRCZP OS lib Instance serializer", "required": [ "name", "id", "status", "image", "flavor_name" ], "type": "object", "properties": { "name": { "title": "Name", "type": "string", "minLength": 1 }, "id": { "title": "Id", "type": "string", "minLength": 1 }, "status": { "title": "Status", "type": "string", "minLength": 1 }, "image": { "$ref": "#/definitions/Image" }, "flavor_name": { "title": "Flavor name", "type": "string", "minLength": 1 } } }, "NodeAction": { "description": "", "required": [ "action" ], "type": "object", "properties": { "action": { "title": "Action", "description": "Action you with to perform on the node.", "type": "string", "enum": [ "suspend", "resume", "reboot" ] } } } }
}
