---
swagger: "2.0"
info:
  version: "Version: 1.1.63"
  title: "KYPO2 Training - API Reference"
host: "localhost:8080"
basePath: "/kypo2-rest-training/api/v1"
tags:
- name: "Export Imports"
- name: "Training definitions"
- name: "Training instances"
- name: "Training runs"
- name: "Visualizations"
schemes:
- "http"
- "https"
paths:
  /exports/training-definitions/{definitionId}:
    get:
      tags:
      - "Export Imports"
      summary: "Get exported training definitions and levels."
      description: ""
      operationId: "getExportedTrainingDefinitionAndLevels"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of training definition"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Training definitions and levels found and exported."
          schema:
            $ref: "#/definitions/ExportTrainingDefinitionAndLevelsDTO"
        404:
          description: "Training definition not found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /exports/training-instances/{instanceId}:
    get:
      tags:
      - "Export Imports"
      summary: "Archive training instance"
      description: ""
      operationId: "archiveTrainingInstance"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Id of training instance"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Training instance archived."
          schema:
            $ref: "#/definitions/TrainingInstanceArchiveDTO"
        404:
          description: "Training instance not found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot archive instance that is not finished."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /imports/training-definitions:
    post:
      tags:
      - "Export Imports"
      summary: "Import training definition with levels."
      description: ""
      operationId: "importTrainingDefinition"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Training definition to be imported"
        required: true
        schema:
          $ref: "#/definitions/ImportTrainingDefinitionDTO"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "Training definition imported."
          schema:
            $ref: "#/definitions/TrainingDefinitionByIdDTO"
        422:
          description: "Sum of hints penalties in imported game level is greater than\
            \ maximal score."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions:
    get:
      tags:
      - "Training definitions"
      summary: "Get all Training Definitions."
      description: ""
      operationId: "findAllTrainingDefinitions"
      produces:
      - "application/json"
      parameters:
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The requested resources have been found."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TrainingDefinitionByIdDTO"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    post:
      tags:
      - "Training definitions"
      summary: "Create Training Definition"
      description: ""
      operationId: "createTrainingDefinition"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Training Definition to be created"
        required: false
        schema:
          $ref: "#/definitions/TrainingDefinitionCreateDTO"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The Training definition has been created."
          schema:
            $ref: "#/definitions/TrainingDefinitionByIdDTO"
        400:
          description: "The provided training definition is not valid"
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    put:
      tags:
      - "Training definitions"
      summary: "Update Training Definition"
      description: "Only unreleased training definition can be updated"
      operationId: "updateTrainingDefinition"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Training definition to be updated"
        required: false
        schema:
          $ref: "#/definitions/TrainingDefinitionUpdateDTO"
      responses:
        200:
          description: "The training definition has been updated."
        400:
          description: "The provided training definition is not valid"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot edit released or archived training definition."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/designers:
    get:
      tags:
      - "Training definitions"
      summary: "Get designers."
      description: ""
      operationId: "getDesigners"
      produces:
      - "application/json"
      parameters:
      - name: "givenName"
        in: "query"
        description: "Given name filter."
        required: false
        type: "string"
      - name: "familyName"
        in: "query"
        description: "Family name filter."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The designers have been found."
          schema:
            $ref: "#/definitions/UserInfoRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/for-organizers:
    get:
      tags:
      - "Training definitions"
      summary: "Get all Training Definitions for organizers."
      description: ""
      operationId: "findAllTrainingDefinitionsForOrganizers"
      produces:
      - "application/json"
      parameters:
      - name: "state"
        in: "query"
        description: "State of the training definition"
        required: true
        type: "string"
        enum:
        - "PRIVATED"
        - "RELEASED"
        - "ARCHIVED"
        - "UNRELEASED"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The Training definitions have been found."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TrainingDefinitionInfoDTO"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/levels/{levelId}:
    get:
      tags:
      - "Training definitions"
      summary: "Find level by ID"
      description: ""
      operationId: "findLevelById"
      produces:
      - "application/json"
      parameters:
      - name: "levelId"
        in: "path"
        description: "Id of wanted level"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The level has been found."
          schema:
            $ref: "#/definitions/AbstractLevelDTO"
        404:
          description: "The level has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/organizers:
    get:
      tags:
      - "Training definitions"
      summary: "Get organizers."
      description: ""
      operationId: "getOrganizers"
      produces:
      - "application/json"
      parameters:
      - name: "givenName"
        in: "query"
        description: "Given name filter."
        required: false
        type: "string"
      - name: "familyName"
        in: "query"
        description: "Family name filter."
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "Pagination support."
        required: false
        schema:
          $ref: "#/definitions/Pageable"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The organizers have been found."
          schema:
            $ref: "#/definitions/UserInfoRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}:
    get:
      tags:
      - "Training definitions"
      summary: "Get Training Definition by Id."
      description: ""
      operationId: "findTrainingDefinitionById"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "ID of training definition to be retrieved."
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The Training definition has been found."
          schema:
            $ref: "#/definitions/TrainingDefinitionByIdDTO"
        404:
          description: "The Training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    post:
      tags:
      - "Training definitions"
      summary: "Clone training definition"
      description: "Only released and archived training definitions can be cloned"
      operationId: "cloneTrainingDefinition"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of training definition to be cloned"
        required: true
        type: "integer"
        format: "int64"
      - name: "title"
        in: "query"
        description: "Title of cloned definition"
        required: true
        type: "string"
      responses:
        200:
          description: "The Training definition has been cloned."
          schema:
            $ref: "#/definitions/TrainingDefinitionByIdDTO"
        404:
          description: "The Training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "Training definitions"
      summary: "Delete training definition"
      description: "Released training definition cannot be deleted"
      operationId: "deleteTrainingDefinition"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of training definition to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The Training definition has been deleted."
        404:
          description: "The Training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot delete released training definition."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/assessment-levels:
    put:
      tags:
      - "Training definitions"
      summary: "Update assessment level"
      description: "Level can be deleted only in unreleased training definition"
      operationId: "updateAssessmentLevel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of definition to which level is assigned"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Assessment level to be updated"
        required: false
        schema:
          $ref: "#/definitions/AssessmentLevelUpdateDTO"
      responses:
        204:
          description: "The assessment level has been updated."
        400:
          description: "The provided assessment level is not valid."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The level has not been found in definition."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot edit released or archived training definition."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/authors:
    get:
      tags:
      - "Training definitions"
      summary: "Get authors."
      description: ""
      operationId: "getAuthors"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "ID of the training definition which contains authors you want\
          \ to retrieve."
        required: true
        type: "integer"
        format: "int64"
      - name: "givenName"
        in: "query"
        description: "Given name filter."
        required: false
        type: "string"
      - name: "familyName"
        in: "query"
        description: "Family name filter."
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "Pagination support."
        required: false
        schema:
          $ref: "#/definitions/Pageable"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The authors have been found."
          schema:
            $ref: "#/definitions/UserInfoRestResource"
        404:
          description: "The training definition has not been found"
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    put:
      tags:
      - "Training definitions"
      summary: "Edit authors."
      description: ""
      operationId: "editAuthors"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "ID of training definition to be updated."
        required: true
        type: "integer"
        format: "int64"
      - name: "authorsAddition"
        in: "query"
        description: "Ids of the users to be added to the training definition."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "authorsRemoval"
        in: "query"
        description: "Ids of the users to be removed from the training definition."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The authors have been updated."
          schema:
            $ref: "#/definitions/UserInfoRestResource"
        404:
          description: "The training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/beta-testers:
    get:
      tags:
      - "Training definitions"
      summary: "Get beta testers."
      description: ""
      operationId: "getBetaTesters"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "ID of the training definition which contains beta testers you\
          \ want to retrieve"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Pagination support."
        required: false
        schema:
          $ref: "#/definitions/Pageable"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The beta testers have been found."
          schema:
            $ref: "#/definitions/UserInfoRestResource"
        404:
          description: "The training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/designers-not-in-training-definition:
    get:
      tags:
      - "Training definitions"
      summary: "Get designers not in given training definition."
      description: ""
      operationId: "findDesignersNotInGivenTrainingDefinition"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "ID of the training definition which do not contains authors\
          \ you want to retrieve."
        required: true
        type: "integer"
        format: "int64"
      - name: "givenName"
        in: "query"
        description: "Given name filter."
        required: false
        type: "string"
      - name: "familyName"
        in: "query"
        description: "Family name filter."
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The designers have been found."
          schema:
            $ref: "#/definitions/UserInfoRestResource"
        404:
          description: "The training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/game-levels:
    put:
      tags:
      - "Training definitions"
      summary: "Update game level"
      description: "Level can be updated only in unreleased training definition"
      operationId: "updateGameLevel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of definition to which level is assigned"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Game level to be updated"
        required: false
        schema:
          $ref: "#/definitions/GameLevelUpdateDTO"
      responses:
        204:
          description: "The game level has been updated."
        400:
          description: "The provided game level is not valid."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The game level has not been found in definition."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot edit released or archived training definition."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/info-levels:
    put:
      tags:
      - "Training definitions"
      summary: "Update info level"
      description: "Level can be deleted only in unreleased training definition"
      operationId: "updateInfoLevel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of definition to which level is assigned"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Info level to be updated"
        required: false
        schema:
          $ref: "#/definitions/InfoLevelUpdateDTO"
      responses:
        204:
          description: "The info level has been updated."
        400:
          description: "The provided info level is not valid."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The info level has not been found in definition."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot edit released or archived training definition."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/levels/{levelIdFrom}/swap-with/{levelIdTo}:
    put:
      tags:
      - "Training definitions"
      summary: "Swap levels"
      description: "The first one level cannot be swapped to the left"
      operationId: "swapLevels"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of training definition"
        required: true
        type: "integer"
        format: "int64"
      - name: "levelIdFrom"
        in: "path"
        description: "Id of training definition"
        required: true
        type: "integer"
        format: "int64"
      - name: "levelIdTo"
        in: "path"
        description: "Id of training definition"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The level has been swapped to the left."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BasicLevelInfoDTO"
        404:
          description: "The Training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot edit released or archived training definition or cannot\
            \ swap first level to the left."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/levels/{levelIdToBeMoved}/move-to/{newPosition}:
    put:
      tags:
      - "Training definitions"
      summary: "Move level"
      description: ""
      operationId: "moveLevel"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of training definition"
        required: true
        type: "integer"
        format: "int64"
      - name: "levelIdToBeMoved"
        in: "path"
        description: "Id of training definition"
        required: true
        type: "integer"
        format: "int64"
      - name: "newPosition"
        in: "path"
        description: "Id of training definition"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "The level has been moved to the given position."
          schema:
            $ref: "#/definitions/BasicLevelInfoDTO"
        404:
          description: "The Training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot edit released or archived training definition."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/levels/{levelId}:
    delete:
      tags:
      - "Training definitions"
      summary: "Delete specific level from training definition"
      description: "Level can be deleted only in unreleased training definition"
      operationId: "deleteOneLevel"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of training definition from which level is deleted"
        required: true
        type: "integer"
        format: "int64"
      - name: "levelId"
        in: "path"
        description: "Id of level to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The level has been deleted."
          schema:
            type: "object"
        404:
          description: "The level has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot edit released or archived training definition."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/levels/{levelType}:
    post:
      tags:
      - "Training definitions"
      summary: "Create level"
      description: "Creates only default level for given training definition"
      operationId: "createLevel"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of definition for which is level created"
        required: true
        type: "integer"
        format: "int64"
      - name: "levelType"
        in: "path"
        description: "Level type"
        required: true
        type: "string"
        enum:
        - "GAME"
        - "ASSESSMENT"
        - "INFO"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BasicLevelInfoDTO"
        201:
          description: "The level has been created."
          schema:
            $ref: "#/definitions/AbstractLevelDTO"
        404:
          description: "The training definition has not been not found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot create level in released or archived training definition."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-definitions/{definitionId}/states/{state}:
    put:
      tags:
      - "Training definitions"
      summary: "Switch state of training definition"
      description: ""
      operationId: "switchDefinitionState"
      produces:
      - "application/json"
      parameters:
      - name: "definitionId"
        in: "path"
        description: "Id of definition"
        required: true
        type: "integer"
        format: "int64"
      - name: "state"
        in: "path"
        description: "New state of definition"
        required: true
        type: "string"
        enum:
        - "RELEASED"
        - "UNRELEASED"
        - "ARCHIVED"
      responses:
        200:
          description: "The training definition has been updated."
        404:
          description: "The training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot edit definition with created instances."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-instances:
    get:
      tags:
      - "Training instances"
      summary: "Get all training instances."
      description: ""
      operationId: "findAllTrainingInstances"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pagination support."
        required: false
        schema:
          $ref: "#/definitions/Pageable"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The training instances have been found."
          schema:
            $ref: "#/definitions/TrainingInstanceRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    post:
      tags:
      - "Training instances"
      summary: "Create training instance"
      description: "This can only be done by the organizer or administrator"
      operationId: "createTrainingInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Training instance to be created"
        required: true
        schema:
          $ref: "#/definitions/TrainingInstanceCreateDTO"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The training instance has been created."
          schema:
            $ref: "#/definitions/TrainingInstanceDTO"
        400:
          description: "The provided training instance is not valid."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The training definition has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "The training instance start time and end time are not valid."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    put:
      tags:
      - "Training instances"
      summary: "Update training instance"
      description: "This can only be done by organizer of training instance or administrator"
      operationId: "updateTrainingInstance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Training instance to be updated"
        required: false
        schema:
          $ref: "#/definitions/TrainingInstanceUpdateDTO"
      responses:
        200:
          description: "The training instance has been updated."
          schema:
            type: "string"
        404:
          description: "The training instance has not been found"
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "The training instance start time and end time are not valid."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-instances/{instanceId}:
    get:
      tags:
      - "Training instances"
      summary: "Get training instance by id."
      description: "Returns training instance by id and also contains particular training\
        \ definition in it."
      operationId: "findTrainingInstanceById"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Training instance ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The training instance has been found"
          schema:
            $ref: "#/definitions/TrainingInstanceDTO"
        404:
          description: "The training instance has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "Training instances"
      summary: "Delete training instance"
      description: "This can only be done by organizer of training instance or administrator"
      operationId: "deleteTrainingInstance"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Id of training instance to be deleted"
        required: true
        type: "integer"
        format: "int64"
      - name: "forceDelete"
        in: "query"
        description: "Indication if this training run must be deleted no matter of\
          \ any check (force it)"
        required: false
        type: "boolean"
      responses:
        200:
          description: "The training instance has been updated."
        400:
          description: "The provided training instance is not valid."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The training instance has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "The training instance cannot be deleted for the specific reason\
            \ stated in the error message."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-instances/{instanceId}/assign-pool:
    patch:
      tags:
      - "Training instances"
      summary: "Assign pool to the training instance"
      description: "This can only be done by organizer of training instance or administrator"
      operationId: "assignPool"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Id of training instance to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Id of pool to be assigned to training instance"
        required: true
        schema:
          $ref: "#/definitions/TrainingInstanceAssignPoolIdDTO"
      responses:
        200:
          description: "The training instance has been updated."
          schema:
            $ref: "#/definitions/TrainingInstanceBasicInfoDTO"
        400:
          description: "The provided training instance is not valid."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The training instance has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "The training instance cannot be updated for the specific reason\
            \ stated in the error message."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-instances/{instanceId}/organizers:
    get:
      tags:
      - "Training instances"
      summary: "Get organizers of training instance."
      description: ""
      operationId: "getOrganizersOfTrainingInstance"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "ID of training instance for which to retrieve the organizers."
        required: true
        type: "integer"
        format: "int64"
      - name: "givenName"
        in: "query"
        description: "Given name filter."
        required: true
        type: "string"
      - name: "familyName"
        in: "query"
        description: "Family name filter."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Pagination support."
        required: false
        schema:
          $ref: "#/definitions/Pageable"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The organizers have been found."
          schema:
            $ref: "#/definitions/UserInfoRestResource"
        404:
          description: "The training instance has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    put:
      tags:
      - "Training instances"
      summary: "Edit organizers."
      description: ""
      operationId: "editOrganizers"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "ID of training instance to be updated."
        required: true
        type: "integer"
        format: "int64"
      - name: "organizersAddition"
        in: "query"
        description: "Ids of the organizers to be added to the training instance."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "organizersRemoval"
        in: "query"
        description: "Ids of the organizers to be removed from the training instance."
        required: false
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        204:
          description: "The organizers of training instance have been edited."
        404:
          description: "The training instance has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered. Probably error during\
            \ calling other microservice."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-instances/{instanceId}/organizers-not-in-training-instance:
    get:
      tags:
      - "Training instances"
      summary: "Get organizers not in given training instance."
      description: ""
      operationId: "findOrganizersNotInGivenTrainingInstance"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "ID of the training instance which do not contains organizers\
          \ you want to retrieve."
        required: true
        type: "integer"
        format: "int64"
      - name: "givenName"
        in: "query"
        description: "Given name filter."
        required: false
        type: "string"
      - name: "familyName"
        in: "query"
        description: "Family name filter."
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "Pagination support."
        required: false
        schema:
          $ref: "#/definitions/Pageable"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The organizers have been found."
          schema:
            $ref: "#/definitions/UserInfoRestResource"
        404:
          description: "The training instance has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-instances/{instanceId}/training-runs:
    get:
      tags:
      - "Training instances"
      summary: "Get all training runs of specific training instance"
      description: "This can only be done by organizer of training instance or administrator"
      operationId: "findAllTrainingRunsByTrainingInstanceId"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Training Instance Id"
        required: true
        type: "integer"
        format: "int64"
      - name: "isActive"
        in: "query"
        description: "If only active or not active training runs should be returned."
        required: false
        type: "boolean"
      - in: "body"
        name: "body"
        description: "Pagination support."
        required: false
        schema:
          $ref: "#/definitions/Pageable"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The training runs have been found."
          schema:
            $ref: "#/definitions/TrainingRunRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-instances/{instanceId}/unassign-pool:
    patch:
      tags:
      - "Training instances"
      summary: "Unassign pool of training instance"
      description: "This can only be done by organizer of training instance or administrator"
      operationId: "unassignPool"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Id of training instance to unassign pool."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The pool has been unassigned."
          schema:
            $ref: "#/definitions/TrainingInstanceBasicInfoDTO"
        409:
          description: "The training instance has not assigned pool."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs:
    get:
      tags:
      - "Training runs"
      summary: "Get all training runs."
      description: ""
      operationId: "findAllTrainingRuns"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pagination support."
        required: false
        schema:
          $ref: "#/definitions/Pageable"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The training runs have been found."
          schema:
            $ref: "#/definitions/TrainingRunRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    post:
      tags:
      - "Training runs"
      summary: "Access training run."
      description: ""
      operationId: "createTrainingRun"
      produces:
      - "application/json"
      parameters:
      - name: "accessToken"
        in: "query"
        description: "accessToken"
        required: true
        type: "string"
      responses:
        200:
          description: "The training run has been accessed."
          schema:
            $ref: "#/definitions/AccessTrainingRunDTO"
        404:
          description: "There is no training instance with given accessToken or first\
            \ level not found in database."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "No assigned pool to the training instance."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Some error occurred during getting info about sandboxes."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "Training runs"
      summary: "Delete training runs"
      description: ""
      operationId: "deleteTrainingRuns"
      produces:
      - "application/json"
      parameters:
      - name: "trainingRunIds"
        in: "query"
        description: "Ids of training runs that will be deleted"
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "forceDelete"
        in: "query"
        description: "Indication if this training run must be deleted no matter of\
          \ any check (force it)"
        required: false
        type: "boolean"
      responses:
        200:
          description: "The training runs have been deleted."
        500:
          description: "Unexpected condition was encountered"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/accessible:
    get:
      tags:
      - "Training runs"
      summary: "Get all accessed training runs."
      description: "Returns training run which was accessed by logged in user"
      operationId: "getAllAccessedTrainingRuns"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pagination support."
        required: false
        schema:
          $ref: "#/definitions/Pageable"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      - name: "sortByTitle"
        in: "query"
        description: "Sort by title attribute. As values us asc|desc"
        required: false
        type: "string"
        x-example: "asc"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "The accessed training runs have been found."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccessedTrainingRunDTO"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/{runId}:
    get:
      tags:
      - "Training runs"
      summary: "Get training run by ID."
      description: ""
      operationId: "findTrainingRunById"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Id of training run"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The training run has been found."
          schema:
            $ref: "#/definitions/TrainingRunDTO"
        404:
          description: "The training run has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    put:
      tags:
      - "Training runs"
      summary: "Finish training run"
      description: "Training run will be finished if the current level is the last\
        \ level and it is answered."
      operationId: "finishTrainingRun"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Training run ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The training run has been finished."
        404:
          description: "The training run has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot finish training run because of the current state."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
    delete:
      tags:
      - "Training runs"
      summary: "Delete training run"
      description: ""
      operationId: "deleteTrainingRun"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Id of training run that will be deleted"
        required: true
        type: "integer"
        format: "int64"
      - name: "forceDelete"
        in: "query"
        description: "Indication if this training run must be deleted no matter of\
          \ any check (force it)"
        required: false
        type: "boolean"
      responses:
        200:
          description: "The training run has been deleted."
        404:
          description: "The training run has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "The training run is still running."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/{runId}/archive:
    patch:
      tags:
      - "Training runs"
      summary: "Archive training run"
      description: "The state of the Training run will be change to archived."
      operationId: "archiveTrainingRun"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Training run ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The training run has been archived."
        404:
          description: "The training run has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/{runId}/assessment-evaluations:
    put:
      tags:
      - "Training runs"
      summary: "Evaluate responses to assessment"
      description: ""
      operationId: "evaluateResponsesToAssessment"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Training run ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Responses to assessment"
        required: true
        schema:
          type: "string"
      responses:
        204:
          description: "The responses to assessment has been evaluated and stored."
        404:
          description: "The training run has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Current level of training is not assessment level or level\
            \ has been already answered."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/{runId}/hints/{hintId}:
    get:
      tags:
      - "Training runs"
      summary: "Get hint of game level."
      description: "Returns hint if given training runs exists and current level is\
        \ game level"
      operationId: "getHint"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Training run ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "hintId"
        in: "path"
        description: "Hint ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The hint has been found."
          schema:
            $ref: "#/definitions/HintDTO"
        400:
          description: "Current level is not game level and does not have hints."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The hint has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "The hint with given id is not in current level of training\
            \ run."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/{runId}/is-correct-flag:
    post:
      tags:
      - "Training runs"
      summary: "Check flag of game level"
      description: "Current level of given training run must be game level"
      operationId: "isCorrectFlag"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Training run ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Submitted flag"
        required: true
        schema:
          $ref: "#/definitions/ValidateFlagDTO"
      responses:
        200:
          description: "The flag has been checked."
          schema:
            $ref: "#/definitions/IsCorrectFlagDTO"
        400:
          description: "Current level is not game level and does not have flag."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The training run has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/{runId}/next-levels:
    get:
      tags:
      - "Training runs"
      summary: "Get level of given training run."
      description: "Returns (assessment, game, info) level if any next level exists\
        \ and training run as well"
      operationId: "getNextLevel"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Training run ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "fields"
        in: "query"
        description: "Fields which should be returned in REST API response"
        required: false
        type: "string"
      responses:
        200:
          description: "The next level has been found."
          schema:
            $ref: "#/definitions/AbstractLevelDTO"
        404:
          description: "The next level has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/{runId}/participant:
    get:
      tags:
      - "Training runs"
      summary: "Get participant."
      description: ""
      operationId: "getParticipant"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Get participant for the given runId."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The participant has been found."
          schema:
            $ref: "#/definitions/UserRefDTO"
        404:
          description: "The training run has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/{runId}/resumption:
    get:
      tags:
      - "Training runs"
      summary: "Get current level of resumed training run"
      description: ""
      operationId: "resumeTrainingRun"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Training run ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The training run has been resumed."
          schema:
            $ref: "#/definitions/AccessTrainingRunDTO"
        404:
          description: "The training run has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        409:
          description: "Cannot resume finished training run."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /training-runs/{runId}/solutions:
    get:
      tags:
      - "Training runs"
      summary: "Get solution of game level."
      description: "Returns solution if given training runs exists and current level\
        \ is game level"
      operationId: "getSolution"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Training run ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "The solution has been found."
          schema:
            type: "string"
        400:
          description: "Current level is not game level and does not have solution."
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "The training run has not been found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /visualizations/training-instances/{instanceId}:
    get:
      tags:
      - "Visualizations"
      summary: "Get necessary visualization info for training instance."
      description: ""
      operationId: "gatherVisualizationInfoForTrainingInstance"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Training instance ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Visualization info found."
          schema:
            $ref: "#/definitions/VisualizationInfoDTO"
        404:
          description: "Training instance with given id not found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /visualizations/training-instances/{instanceId}/clustering:
    get:
      tags:
      - "Visualizations"
      summary: "Get necessary visualization info for training instance."
      description: ""
      operationId: "getClusteringVisualizations"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Training instance ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Data for visualization found."
          schema:
            $ref: "#/definitions/ClusteringVisualizationDTO"
        404:
          description: "Training instance with given id not found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /visualizations/training-instances/{instanceId}/level-tabs:
    get:
      tags:
      - "Visualizations"
      summary: "Get necessary level tabs visualization info for training instance."
      description: ""
      operationId: "getLevelTabsVisualizations"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Training instance ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Data for visualization found."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LevelTabsLevelDTO"
        404:
          description: "Training instance with given id not found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /visualizations/training-instances/{instanceId}/participants:
    get:
      tags:
      - "Visualizations"
      summary: "Get necessary info about participants for specific training instance."
      description: ""
      operationId: "getParticipantsForGivenTrainingInstance"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Training instance ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Visualization info found."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserRefDTO"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /visualizations/training-instances/{instanceId}/progress:
    get:
      tags:
      - "Visualizations"
      summary: "Get necessary visualization info for training instance."
      description: ""
      operationId: "gatherVisualizationInfoForTrainingInstanceProgress"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Training instance ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Visualization info found."
          schema:
            $ref: "#/definitions/VisualizationInfoDTO"
        404:
          description: "Training instance with given id not found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /visualizations/training-instances/{instanceId}/table:
    get:
      tags:
      - "Visualizations"
      summary: "Get necessary table visualization info for training instance."
      description: ""
      operationId: "getTableVisualizations"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Training instance ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Data for visualization found."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PlayerDataDTO"
        404:
          description: "Training instance with given id not found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /visualizations/training-instances/{instanceId}/timeline:
    get:
      tags:
      - "Visualizations"
      summary: "Get necessary timeline visualization info for training instance."
      description: ""
      operationId: "getTimelineVisualizations"
      produces:
      - "application/json"
      parameters:
      - name: "instanceId"
        in: "path"
        description: "Training instance ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Data for visualization found."
          schema:
            $ref: "#/definitions/TimelineDTO"
        404:
          description: "Training instance with given id not found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /visualizations/training-runs/{runId}:
    get:
      tags:
      - "Visualizations"
      summary: "Get necessary visualization info for training run."
      description: ""
      operationId: "gatherVisualizationInfoForTrainingRun"
      produces:
      - "application/json"
      parameters:
      - name: "runId"
        in: "path"
        description: "Training run ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Visualization info found."
          schema:
            $ref: "#/definitions/VisualizationInfoDTO"
        404:
          description: "Training run with given id not found."
          schema:
            $ref: "#/definitions/ApiError"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
  /visualizations/users:
    get:
      tags:
      - "Visualizations"
      summary: "Get users by IDs."
      description: ""
      operationId: "getUsersByIds"
      produces:
      - "application/json"
      parameters:
      - name: "usersIds"
        in: "query"
        description: "usersIds"
        required: true
        type: "array"
        items:
          type: "integer"
          format: "int64"
        collectionFormat: "multi"
      - name: "page"
        in: "query"
        description: "Results page you want to retrieve (0..N)"
        required: false
        type: "integer"
        x-example: 0
      - name: "size"
        in: "query"
        description: "Number of records per page."
        required: false
        type: "integer"
        x-example: 20
      - name: "sort"
        in: "query"
        description: "Sorting criteria in the format: property(,asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        type: "array"
        items:
          type: "string"
          example: "asc"
        collectionFormat: "multi"
        x-example: "asc"
      responses:
        200:
          description: "Visualization info found."
          schema:
            $ref: "#/definitions/UserInfoRestResource"
        500:
          description: "Unexpected condition was encountered."
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - bearerAuth: []
securityDefinitions:
  bearerAuth:
    description: "Obtain bearer token from OIDC provider and enter the token in the\
      \ following field. Use format 'Bearer {token}'"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  AbstractLevelDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of level."
      title:
        type: "string"
        example: "Game Level1"
        description: "Short textual description of the level."
      maxScore:
        type: "integer"
        format: "int32"
        example: 20
        description: "The maximum score a participant can achieve during a level."
      snapshotHook:
        $ref: "#/definitions/SnapshotHookDTO"
      levelType:
        type: "string"
        example: "GAME"
        description: "Type of the level."
        enum:
        - "INFO_LEVEL"
        - "GAME_LEVEL"
        - "ASSESSMENT_LEVEL"
      estimatedDuration:
        type: "integer"
        format: "int32"
        example: 5
        description: "Estimated time taken by the player to resolve the level."
      trainingDefinition:
        example: "2"
        description: "Training definition to which is this level assigned."
        $ref: "#/definitions/TrainingDefinitionDTO"
      order:
        type: "integer"
        format: "int32"
        example: 2
        description: "Order of level, starts with 0"
    description: "Superclass for classes GameLevelDTO, AssessmentLevelDTO and InfoLevelDTO"
  AbstractLevelExportDTO:
    type: "object"
    properties:
      title:
        type: "string"
        example: "Game Level1"
        description: "Short textual description of the level."
      maxScore:
        type: "integer"
        format: "int32"
        example: 20
        description: "The maximum score a participant can achieve during a level."
      levelType:
        type: "string"
        example: "GAME"
        description: "Type of the level."
        enum:
        - "INFO_LEVEL"
        - "GAME_LEVEL"
        - "ASSESSMENT_LEVEL"
      order:
        type: "integer"
        format: "int32"
        example: 2
        description: "Order of level, starts with 0"
      estimatedDuration:
        type: "integer"
        format: "int32"
        example: 5
        description: "Estimated time (minutes) taken by the player to solve the level."
    description: "Superclass for classes GameLevelExportDTO, InfoLevelExportDTO and\
      \ AssessmentLevelExportDTO"
  AbstractLevelImportDTO:
    type: "object"
    required:
    - "levelType"
    - "maxScore"
    - "order"
    discriminator: "level_type"
    properties:
      title:
        type: "string"
        example: "Game Level1"
        description: "Short textual description of the level."
      maxScore:
        type: "integer"
        format: "int32"
        example: 20
        description: "The maximum score a participant can achieve during a level."
        minimum: 0
        maximum: 100
      levelType:
        type: "string"
        example: "GAME_LEVEL"
        description: "Type of the level."
        enum:
        - "INFO_LEVEL"
        - "GAME_LEVEL"
        - "ASSESSMENT_LEVEL"
      order:
        type: "integer"
        format: "int32"
        example: 2
        description: "Order of level, starts with 0"
        minimum: 0
      estimatedDuration:
        type: "integer"
        format: "int32"
        example: 5
        description: "Estimated time (minutes) taken by the player to solve the level."
    description: "Superclass for classes GameLevelImportDTO, AssessmentLevelImportDTO\
      \ and InfoLevelImportDTO"
  AbstractLevelVisualizationDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of level."
      title:
        type: "string"
        example: "Game Level1"
        description: "Short textual description of the level."
      maxScore:
        type: "integer"
        format: "int32"
        example: 20
        description: "The maximum score a participant can achieve during a level."
      levelType:
        type: "string"
        example: "GAME"
        description: "Type of the level."
        enum:
        - "INFO_LEVEL"
        - "GAME_LEVEL"
        - "ASSESSMENT_LEVEL"
      estimatedDuration:
        type: "integer"
        format: "int64"
        example: 5
        description: "Estimated time taken by the player to resolve the level."
      order:
        type: "integer"
        format: "int32"
        example: 1
        description: "Order of level among levels in training definition."
    description: "Superclass for classes GameLevelDTO, AssessmentLevelDTO and InfoLevelDTO"
  AccessTrainingRunDTO:
    type: "object"
    properties:
      trainingRunID:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training run."
      showStepperBar:
        type: "boolean"
        example: false
        description: "Sign if stepper bar should be displayed."
      sandboxInstanceRefId:
        type: "integer"
        format: "int64"
        example: 2
        description: "Main identifier of sandbox which is assigned to training run."
      abstractLevelDTO:
        description: "First level in the current training run."
        $ref: "#/definitions/AbstractLevelDTO"
      infoAboutLevels:
        type: "array"
        description: "Information about all levels in training instance."
        items:
          $ref: "#/definitions/BasicLevelInfoDTO"
      instanceId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Id of associated training instance"
      startTime:
        type: "string"
        format: "date-time"
        example: "2016-10-19 10:23:54+02"
        description: "Date when training run started."
      takenSolution:
        type: "string"
        example: "true"
        description: "Sign if solution of current game level was taken"
      takenHints:
        type: "array"
        description: "All already taken hints."
        items:
          $ref: "#/definitions/TakenHintDTO"
    description: "Just accessed training run."
  AccessedTrainingRunDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training run."
      title:
        type: "string"
        example: "Concluded Instance"
        description: "Short textual description of the training instance."
      trainingInstanceStartDate:
        type: "string"
        format: "date-time"
        example: "2016-10-19T10:23:54"
        description: "Start date of training instance for which the training run was\
          \ created."
      trainingInstanceEndDate:
        type: "string"
        format: "date-time"
        example: "2017-10-19T10:23:54"
        description: "End date of training instance for which the training run was\
          \ created."
      currentLevelOrder:
        type: "integer"
        format: "int32"
        example: 1
        description: "Current level order of training run."
      numberOfLevels:
        type: "integer"
        format: "int32"
        example: 3
        description: "The number of levels in the training instance."
      possibleAction:
        type: "string"
        example: "RESULTS"
        description: "Possible action which can be executed with training Run."
        enum:
        - "NONE"
        - "RESULTS"
        - "RESUME"
      instanceId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Id of associated training instance"
    description: "Already accessed training run by some participant."
  AccessedTrainingRunRestResource:
    type: "object"
    properties:
      content:
        type: "array"
        description: "Retrieved Accessed Training Runs from databases."
        items:
          $ref: "#/definitions/AccessedTrainingRunDTO"
      pagination:
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages"
  ApiEntityError:
    allOf:
    - $ref: "#/definitions/ApiError"
    - type: "object"
      properties:
        entityErrorDetail:
          description: "Detail of the entity which is related to the error."
          $ref: "#/definitions/EntityErrorDetail"
      description: "A detailed error information related to the entity."
  ApiError:
    type: "object"
    properties:
      timestamp:
        type: "integer"
        format: "int64"
        example: "1574062900 (different for each type of exception)"
        description: "The time when the exception occurred"
      status:
        type: "string"
        example: "404 Not found (different for each type of exception)."
        description: "The HTTP response status code"
        enum:
        - "CONTINUE"
        - "SWITCHING_PROTOCOLS"
        - "PROCESSING"
        - "CHECKPOINT"
        - "OK"
        - "CREATED"
        - "ACCEPTED"
        - "NON_AUTHORITATIVE_INFORMATION"
        - "NO_CONTENT"
        - "RESET_CONTENT"
        - "PARTIAL_CONTENT"
        - "MULTI_STATUS"
        - "ALREADY_REPORTED"
        - "IM_USED"
        - "MULTIPLE_CHOICES"
        - "MOVED_PERMANENTLY"
        - "FOUND"
        - "MOVED_TEMPORARILY"
        - "SEE_OTHER"
        - "NOT_MODIFIED"
        - "USE_PROXY"
        - "TEMPORARY_REDIRECT"
        - "PERMANENT_REDIRECT"
        - "BAD_REQUEST"
        - "UNAUTHORIZED"
        - "PAYMENT_REQUIRED"
        - "FORBIDDEN"
        - "NOT_FOUND"
        - "METHOD_NOT_ALLOWED"
        - "NOT_ACCEPTABLE"
        - "PROXY_AUTHENTICATION_REQUIRED"
        - "REQUEST_TIMEOUT"
        - "CONFLICT"
        - "GONE"
        - "LENGTH_REQUIRED"
        - "PRECONDITION_FAILED"
        - "PAYLOAD_TOO_LARGE"
        - "REQUEST_ENTITY_TOO_LARGE"
        - "URI_TOO_LONG"
        - "REQUEST_URI_TOO_LONG"
        - "UNSUPPORTED_MEDIA_TYPE"
        - "REQUESTED_RANGE_NOT_SATISFIABLE"
        - "EXPECTATION_FAILED"
        - "I_AM_A_TEAPOT"
        - "INSUFFICIENT_SPACE_ON_RESOURCE"
        - "METHOD_FAILURE"
        - "DESTINATION_LOCKED"
        - "UNPROCESSABLE_ENTITY"
        - "LOCKED"
        - "FAILED_DEPENDENCY"
        - "UPGRADE_REQUIRED"
        - "PRECONDITION_REQUIRED"
        - "TOO_MANY_REQUESTS"
        - "REQUEST_HEADER_FIELDS_TOO_LARGE"
        - "UNAVAILABLE_FOR_LEGAL_REASONS"
        - "INTERNAL_SERVER_ERROR"
        - "NOT_IMPLEMENTED"
        - "BAD_GATEWAY"
        - "SERVICE_UNAVAILABLE"
        - "GATEWAY_TIMEOUT"
        - "HTTP_VERSION_NOT_SUPPORTED"
        - "VARIANT_ALSO_NEGOTIATES"
        - "INSUFFICIENT_STORAGE"
        - "LOOP_DETECTED"
        - "BANDWIDTH_LIMIT_EXCEEDED"
        - "NOT_EXTENDED"
        - "NETWORK_AUTHENTICATION_REQUIRED"
      message:
        type: "string"
        example: "The IDMGroup could not be found in database (different for each\
          \ type of exception)."
        description: "The specific description of the ApiError."
      errors:
        type: "array"
        example: "[The requested resource was not found (different for each type of\
          \ exception).]"
        description: "The list of main reasons of the ApiError."
        items:
          type: "string"
      path:
        type: "string"
        example: "/kypo2-rest-user-and-group/api/v1/groups/1000 (different for each\
          \ type of exception)."
        description: "The requested URI path which caused error."
    description: "Superclass for classes ApiEntityError and ApiMicroserviceError"
  ApiMicroserviceError:
    allOf:
    - $ref: "#/definitions/ApiError"
    - type: "object"
      properties:
        apiSubError:
          description: "Detailed error from another microservice."
          $ref: "#/definitions/ApiSubError"
      description: "A detailed error information related to the microservice."
  ApiSubError:
    type: "object"
    properties:
      status:
        type: "string"
        example: "404 Not found (different for each type of exception)."
        description: "The HTTP response status code"
        enum:
        - "CONTINUE"
        - "SWITCHING_PROTOCOLS"
        - "PROCESSING"
        - "CHECKPOINT"
        - "OK"
        - "CREATED"
        - "ACCEPTED"
        - "NON_AUTHORITATIVE_INFORMATION"
        - "NO_CONTENT"
        - "RESET_CONTENT"
        - "PARTIAL_CONTENT"
        - "MULTI_STATUS"
        - "ALREADY_REPORTED"
        - "IM_USED"
        - "MULTIPLE_CHOICES"
        - "MOVED_PERMANENTLY"
        - "FOUND"
        - "MOVED_TEMPORARILY"
        - "SEE_OTHER"
        - "NOT_MODIFIED"
        - "USE_PROXY"
        - "TEMPORARY_REDIRECT"
        - "PERMANENT_REDIRECT"
        - "BAD_REQUEST"
        - "UNAUTHORIZED"
        - "PAYMENT_REQUIRED"
        - "FORBIDDEN"
        - "NOT_FOUND"
        - "METHOD_NOT_ALLOWED"
        - "NOT_ACCEPTABLE"
        - "PROXY_AUTHENTICATION_REQUIRED"
        - "REQUEST_TIMEOUT"
        - "CONFLICT"
        - "GONE"
        - "LENGTH_REQUIRED"
        - "PRECONDITION_FAILED"
        - "PAYLOAD_TOO_LARGE"
        - "REQUEST_ENTITY_TOO_LARGE"
        - "URI_TOO_LONG"
        - "REQUEST_URI_TOO_LONG"
        - "UNSUPPORTED_MEDIA_TYPE"
        - "REQUESTED_RANGE_NOT_SATISFIABLE"
        - "EXPECTATION_FAILED"
        - "I_AM_A_TEAPOT"
        - "INSUFFICIENT_SPACE_ON_RESOURCE"
        - "METHOD_FAILURE"
        - "DESTINATION_LOCKED"
        - "UNPROCESSABLE_ENTITY"
        - "LOCKED"
        - "FAILED_DEPENDENCY"
        - "UPGRADE_REQUIRED"
        - "PRECONDITION_REQUIRED"
        - "TOO_MANY_REQUESTS"
        - "REQUEST_HEADER_FIELDS_TOO_LARGE"
        - "UNAVAILABLE_FOR_LEGAL_REASONS"
        - "INTERNAL_SERVER_ERROR"
        - "NOT_IMPLEMENTED"
        - "BAD_GATEWAY"
        - "SERVICE_UNAVAILABLE"
        - "GATEWAY_TIMEOUT"
        - "HTTP_VERSION_NOT_SUPPORTED"
        - "VARIANT_ALSO_NEGOTIATES"
        - "INSUFFICIENT_STORAGE"
        - "LOOP_DETECTED"
        - "BANDWIDTH_LIMIT_EXCEEDED"
        - "NOT_EXTENDED"
        - "NETWORK_AUTHENTICATION_REQUIRED"
    description: "Superclass for classes JavaApiError and PythonApiError"
  AssessmentLevelDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelDTO"
    - type: "object"
      properties:
        questions:
          type: "string"
          example: "What is my mothers name?"
          description: "List of questions in this assessment as JSON."
        instructions:
          type: "string"
          example: "Fill me up"
          description: "Assessment instructions for participant."
        assessmentType:
          type: "string"
          example: "TEST"
          description: "Type of assessment."
          enum:
          - "TEST"
          - "QUESTIONNAIRE"
      description: "A questionnaire or a test that is displayed to the participant."
  AssessmentLevelExportDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelExportDTO"
    - type: "object"
      properties:
        questions:
          type: "string"
          example: "What is my mothers name?"
          description: "List of questions in this assessment as JSON."
        instructions:
          type: "string"
          example: "Fill me up"
          description: "Assessment instructions for participant."
        assessmentType:
          type: "string"
          example: "TEST"
          description: "Type of assessment."
          enum:
          - "TEST"
          - "QUESTIONNAIRE"
      description: "Exported assessment level."
  AssessmentLevelImportDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelImportDTO"
    - type: "object"
      required:
      - "assessmentType"
      - "instructions"
      - "questions"
      properties:
        questions:
          type: "string"
          example: "\"[{\"question_type\":\"FFQ\",\"text\":\"Which tool would you\
            \ use to scan the open ports of a server?\",\"points\":6,\"penalty\":3,\"\
            order\":0,\"answer_required\":true,\"correct_choices\":[\"nmap\",\"Nmap\"\
            ]}]\""
          description: "Questions of assessment level to update."
        instructions:
          type: "string"
          example: "Fill me up slowly"
          description: "Instructions of assessment level to update."
        assessmentType:
          type: "string"
          example: "TEST"
          description: "Type of assessment level to update."
          enum:
          - "TEST"
          - "QUESTIONNAIRE"
      description: "Imported assessment level."
  AssessmentLevelUpdateDTO:
    type: "object"
    required:
    - "estimatedDuration"
    - "id"
    - "instructions"
    - "maxScore"
    - "questions"
    - "title"
    - "type"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 8
        description: "Main identifier of level."
      title:
        type: "string"
        example: "Assessment Level1"
        description: "Short textual description of the level."
      maxScore:
        type: "integer"
        format: "int32"
        example: 40
        description: "Maximum score of assessment level to update. Have to be filled\
          \ in range from 0 to 100."
        minimum: 0
        maximum: 100
      questions:
        type: "string"
        example: "\"[{\"question_type\":\"FFQ\",\"text\":\"Which tool would you use\
          \ to scan the open ports of a server?\",\"points\":6,\"penalty\":3,\"order\"\
          :0,\"answer_required\":true,\"correct_choices\":[\"nmap\",\"Nmap\"]}]\""
        description: "Questions of assessment level to update."
      instructions:
        type: "string"
        example: "Fill me up slowly"
        description: "Instructions of assessment level to update."
      type:
        type: "string"
        example: "TEST"
        description: "Type of assessment level to update."
        enum:
        - "TEST"
        - "QUESTIONNAIRE"
      estimatedDuration:
        type: "integer"
        format: "int32"
        example: 5
        description: "Estimated time (minutes) taken by the player to solve the level."
    description: "Assessment level to update."
  AssessmentLevelVisualizationDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelVisualizationDTO"
    - type: "object"
      properties:
        assessmentType:
          type: "string"
          example: "TEST"
          description: "Type of assessment."
          enum:
          - "TEST"
          - "QUESTIONNAIRE"
        questions:
          type: "string"
          example: "What is my mothers name?"
          description: "List of questions in this assessment as JSON."
      description: "Information about assessment level needed for visualizations."
  AttachmentImportDTO:
    type: "object"
    properties:
      content:
        type: "string"
        description: "URL link to file or website."
    description: "Imported attachment."
  BasicLevelInfoDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of level."
      title:
        type: "string"
        example: "Game Level1"
        description: "Short textual description of the level."
      order:
        type: "integer"
        format: "int32"
        example: 1
        description: "Order of level among levels in training definition."
      levelType:
        type: "string"
        example: "GAME"
        description: "Type of the level."
        enum:
        - "INFO_LEVEL"
        - "GAME_LEVEL"
        - "ASSESSMENT_LEVEL"
    description: "Basic information about the level and its type."
  BetaTestingGroupCreateDTO:
    type: "object"
    required:
    - "organizersRefIds"
    properties:
      organizersRefIds:
        type: "array"
        description: "Logins of users who is allowed to see training definition."
        uniqueItems: true
        items:
          type: "integer"
          format: "int64"
    description: "BetaTestingGroup to create. (Deprecated)"
  BetaTestingGroupUpdateDTO:
    type: "object"
    required:
    - "organizersRefIds"
    properties:
      organizersRefIds:
        type: "array"
        description: "Logins of users who is allowed to see training definition."
        uniqueItems: true
        items:
          type: "integer"
          format: "int64"
    description: "BetaTesting group to update. (Deprecated)"
  ClusteringLevelDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      order:
        type: "integer"
        format: "int32"
      levelType:
        type: "string"
        enum:
        - "INFO_LEVEL"
        - "GAME_LEVEL"
        - "ASSESSMENT_LEVEL"
      title:
        type: "string"
      estimatedTime:
        type: "integer"
        format: "int64"
      maxPoints:
        type: "integer"
        format: "int32"
      maxTime:
        type: "integer"
        format: "int64"
      averageTime:
        type: "number"
        format: "float"
      averageScore:
        type: "number"
        format: "float"
      playerData:
        type: "array"
        items:
          $ref: "#/definitions/PlayerDataDTO"
  ClusteringVisualizationDTO:
    type: "object"
    properties:
      finalResults:
        $ref: "#/definitions/GameResultsDTO"
      levels:
        type: "array"
        items:
          $ref: "#/definitions/ClusteringLevelDTO"
    description: "Clustering visualization."
  EntityErrorDetail:
    type: "object"
    properties:
      entity:
        type: "string"
        example: "IDMGroup"
        description: "Class of the entity."
      identifier:
        type: "string"
        example: "id"
        description: "Identifier of the entity."
      identifierValue:
        type: "object"
        example: "1"
        description: "Value of the identifier."
      reason:
        type: "string"
        example: "Group with same name already exists."
        description: "Detailed message of the exception"
  ExportTrainingDefinitionAndLevelsDTO:
    type: "object"
    properties:
      title:
        type: "string"
        example: "TrainingDefinition2"
        description: "A name of the training/game (e.g., Photo Hunter) ."
      description:
        type: "string"
        example: "Unreleased training definition"
        description: "Description of training definition that is visible to the participant."
      prerequisities:
        type: "array"
        description: "List of knowledge and skills necessary to complete the training."
        items:
          type: "string"
      outcomes:
        type: "array"
        description: "A list of knowledge and skills that the participant should learn\
          \ by attending the training (if it is used for educational purposes) "
        items:
          type: "string"
      state:
        type: "string"
        example: "UNRELEASED"
        description: "Current state of training definition."
        enum:
        - "PRIVATED"
        - "RELEASED"
        - "ARCHIVED"
        - "UNRELEASED"
      showStepperBar:
        type: "boolean"
        example: false
        description: "Sign if stepper bar should be displayed."
      levels:
        type: "array"
        description: "Information about all levels in training definition."
        items:
          $ref: "#/definitions/AbstractLevelExportDTO"
      estimatedDuration:
        type: "integer"
        format: "int32"
        example: 5
        description: "Estimated time (minutes) taken by the player to finish run created\
          \ from this definition."
    description: "An exported detailed information about training definition which\
      \ also include individual levels."
  GameLevelDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelDTO"
    - type: "object"
      properties:
        flag:
          type: "string"
          example: "secretFlag"
          description: "Keyword found in game, used for access next level."
        content:
          type: "string"
          example: "Play me"
          description: "The information and experiences that are directed towards\
            \ a participant."
        solution:
          type: "string"
          example: "This is how you do it"
          description: "Instruction how to get flag in game."
        solutionPenalized:
          type: "boolean"
          example: true
          description: "Sign if displaying of solution is penalized."
        hints:
          type: "array"
          description: "Information which helps player resolve the level."
          uniqueItems: true
          items:
            $ref: "#/definitions/HintDTO"
        incorrectFlagLimit:
          type: "integer"
          format: "int32"
          example: 5
          description: "How many times player can submit incorrect flag before displaying\
            \ solution."
      description: "An assignment containing security tasks whose completion yields\
        \ a flag."
  GameLevelExportDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelExportDTO"
    - type: "object"
      properties:
        flag:
          type: "string"
          example: "secretFlag"
          description: "Keyword found in game, used for access next level."
        content:
          type: "string"
          example: "Play me"
          description: "The information and experiences that are directed towards\
            \ a participant."
        solution:
          type: "string"
          example: "This is how you do it"
          description: "Instruction how to get flag in game."
        solutionPenalized:
          type: "boolean"
          example: true
          description: "Sign if displaying of solution is penalized."
        hints:
          type: "array"
          description: "Information which helps player resolve the level."
          uniqueItems: true
          items:
            $ref: "#/definitions/HintExportDTO"
        incorrectFlagLimit:
          type: "integer"
          format: "int32"
          example: 5
          description: "How many times player can submit incorrect flag before displaying\
            \ solution."
        attachments:
          type: "array"
          example: "[]"
          description: "List of attachments."
          items:
            $ref: "#/definitions/AttachmentImportDTO"
      description: "Exported game level."
  GameLevelImportDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelImportDTO"
    - type: "object"
      required:
      - "incorrectFlagLimit"
      - "solutionPenalized"
      properties:
        flag:
          type: "string"
          example: "secretFlag"
          description: "Keyword found in game, used for access next level."
          minLength: 0
          maxLength: 50
        content:
          type: "string"
          example: "Play me"
          description: "The information and experiences that are directed towards\
            \ a participant."
        solution:
          type: "string"
          example: "This is how you do it"
          description: "Instruction how to get flag in game."
        solutionPenalized:
          type: "boolean"
          example: true
          description: "Sign if displaying of solution is penalized."
        hints:
          type: "array"
          description: "Information which helps player resolve the level."
          uniqueItems: true
          items:
            $ref: "#/definitions/HintImportDTO"
        incorrectFlagLimit:
          type: "integer"
          format: "int32"
          example: 5
          description: "How many times player can submit incorrect flag before displaying\
            \ solution."
          minimum: 0
          maximum: 100
        attachments:
          type: "array"
          example: "[]"
          description: "List of attachments."
          items:
            $ref: "#/definitions/AttachmentImportDTO"
      description: "Imported game level."
  GameLevelUpdateDTO:
    type: "object"
    required:
    - "flag"
    - "id"
    - "incorrectFlagLimit"
    - "maxScore"
    - "solutionPenalized"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of level."
      title:
        type: "string"
        example: "Game Level1"
        description: "Short textual description of the level."
      maxScore:
        type: "integer"
        format: "int32"
        example: 20
        description: "The maximum score a participant can achieve during a level."
        minimum: 0
        maximum: 100
      flag:
        type: "string"
        example: "secretFlag"
        description: "Keyword found in game, used for access next level."
        minLength: 0
        maxLength: 50
      content:
        type: "string"
        example: "Play me"
        description: "The information and experiences that are directed towards an\
          \ player."
      solution:
        type: "string"
        example: "This is how you do it"
        description: "Instruction how to get flag in game."
      solutionPenalized:
        type: "boolean"
        example: false
        description: "Sign if displaying of solution is penalized."
      estimatedDuration:
        type: "integer"
        format: "int32"
        example: 20
        description: "Estimated time (minutes) taken by the player to solve the level."
      incorrectFlagLimit:
        type: "integer"
        format: "int32"
        example: 5
        description: "How many times participant can submit incorrect flag before\
          \ displaying solution."
        minimum: 0
        maximum: 100
      hints:
        type: "array"
        description: "Information which helps participant resolve the level."
        uniqueItems: true
        items:
          $ref: "#/definitions/HintDTO"
    description: "Game level to update."
  GameLevelVisualizationDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelVisualizationDTO"
    - type: "object"
      properties:
        content:
          type: "string"
          example: "Play me"
          description: "The information and experiences that are directed towards\
            \ a participant."
        solution:
          type: "string"
          example: "This is how you do it"
          description: "Instruction how to get flag in game."
        flag:
          type: "string"
          example: "secretFlag"
          description: "Keyword found in game, used for access next level."
        solutionPenalized:
          type: "boolean"
          example: true
          description: "Sign if displaying of solution is penalized."
        hints:
          type: "array"
          description: "Information which helps player resolve the level."
          items:
            $ref: "#/definitions/HintDTO"
      description: "Information about game level needed for visualizations."
  GameResultsDTO:
    type: "object"
    properties:
      estimatedTime:
        type: "integer"
        format: "int64"
      maxPoints:
        type: "integer"
        format: "int32"
      maxTime:
        type: "integer"
        format: "int64"
      averageTime:
        type: "number"
        format: "float"
      averageScore:
        type: "number"
        format: "float"
      playerData:
        type: "array"
        items:
          $ref: "#/definitions/PlayerDataDTO"
  HintDTO:
    type: "object"
    required:
    - "hintPenalty"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of hint."
      title:
        type: "string"
        example: "Hint1"
        description: "Short textual description of the hint."
      content:
        type: "string"
        example: "Very good advice"
        description: "The information and experiences that are directed towards a\
          \ participant."
      hintPenalty:
        type: "integer"
        format: "int32"
        example: 10
        description: "The number of points the participant loses after receiving the\
          \ hint."
        minimum: 0
        maximum: 100
      order:
        type: "integer"
        format: "int32"
        example: 1
        description: "The order of hint in game level"
        minimum: 0
    description: "A brief textual description to aid the participant."
  HintExportDTO:
    type: "object"
    properties:
      title:
        type: "string"
        example: "Hint1"
        description: "Short textual description of the hint."
      content:
        type: "string"
        example: "Very good advice"
        description: "The information and experiences that are directed towards a\
          \ participant."
      hintPenalty:
        type: "integer"
        format: "int32"
        example: 10
        description: "The number of points the participant loses after receiving the\
          \ hint."
      order:
        type: "integer"
        format: "int32"
        example: 1
        description: "The order of hint in game level"
    description: "An exported brief textual description to aid the participant."
  HintImportDTO:
    type: "object"
    required:
    - "hintPenalty"
    - "order"
    properties:
      title:
        type: "string"
        example: "Hint1"
        description: "Short textual description of the hint."
      content:
        type: "string"
        example: "Very good advice"
        description: "The information and experiences that are directed towards a\
          \ participant."
      hintPenalty:
        type: "integer"
        format: "int32"
        example: 10
        description: "The number of points the participant loses after receiving the\
          \ hint."
        minimum: 0
        maximum: 100
      order:
        type: "integer"
        format: "int32"
        example: 1
        description: "The order of hint in game level"
        minimum: 0
    description: "Imported hint."
  ImportTrainingDefinitionDTO:
    type: "object"
    required:
    - "showStepperBar"
    - "state"
    properties:
      title:
        type: "string"
        example: "TrainingDefinition2"
        description: "A name of the training/game (e.g., Photo Hunter) ."
      description:
        type: "string"
        example: "Unreleased training definition"
        description: "Description of training definition that is visible to the participant."
      prerequisities:
        type: "array"
        description: "List of knowledge and skills necessary to complete the training."
        items:
          type: "string"
      outcomes:
        type: "array"
        description: "A list of knowledge and skills that the participant should learn\
          \ by attending the training (if it is used for educational purposes) "
        items:
          type: "string"
      state:
        type: "string"
        example: "UNRELEASED"
        description: "Current state of training definition."
        enum:
        - "PRIVATED"
        - "RELEASED"
        - "ARCHIVED"
        - "UNRELEASED"
      showStepperBar:
        type: "boolean"
        example: false
        description: "Sign if stepper bar should be displayed."
      levels:
        type: "array"
        description: "Information about all levels in training definition."
        items:
          $ref: "#/definitions/AbstractLevelImportDTO"
      estimatedDuration:
        type: "integer"
        format: "int32"
        example: 5
        description: "Estimated time it takes to finish runs created from this definition."
    description: "A basic information about hint."
  InfoLevelDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelDTO"
    - type: "object"
      properties:
        content:
          type: "string"
          example: "Informational stuff"
          description: "The information and experiences that are directed towards\
            \ a participant."
      description: "A HTML content for the participant to read."
  InfoLevelExportDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelExportDTO"
    - type: "object"
      properties:
        content:
          type: "string"
          example: "Informational stuff"
          description: "The information and experiences that are directed towards\
            \ a participant."
      description: "Exported info level."
  InfoLevelImportDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelImportDTO"
    - type: "object"
      properties:
        content:
          type: "string"
          example: "Informational stuff"
          description: "The information and experiences that are directed towards\
            \ a participant."
      description: "An imported info level."
  InfoLevelUpdateDTO:
    type: "object"
    required:
    - "id"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 4
        description: "Main identifier of level."
      title:
        type: "string"
        example: "Info Level1"
        description: "Short textual description of the level."
      content:
        type: "string"
        example: "Informational stuff"
        description: "The information and experiences that are directed towards a\
          \ participant."
    description: "Info level to update."
  InfoLevelVisualizationDTO:
    allOf:
    - $ref: "#/definitions/AbstractLevelVisualizationDTO"
    - type: "object"
      properties:
        content:
          type: "string"
          example: "Informational stuff"
          description: "The information and experiences that are directed towards\
            \ a participant."
      description: "Information about info level needed for visualizations."
  IsCorrectFlagDTO:
    type: "object"
    properties:
      remainingAttempts:
        type: "integer"
        format: "int32"
        example: 3
        description: "Number of attempts to submit a bad flag."
      solution:
        type: "string"
        example: "This is how you do it"
        description: "Instruction how to get flag in game."
      correct:
        type: "boolean"
    description: "A response for the request about the validation of the flag. May\
      \ also include solution if remaining attempts reach 0."
  JavaApiError:
    allOf:
    - $ref: "#/definitions/ApiSubError"
    - type: "object"
      properties:
        timestamp:
          type: "integer"
          format: "int64"
          example: "1574062900 (different for each type of exception)"
          description: "The time when the exception occurred"
        message:
          type: "string"
          example: "The IDMGroup could not be found in database (different for each\
            \ type of exception)."
          description: "The specific description of the ApiError."
        errors:
          type: "array"
          example: "[The requested resource was not found (different for each type\
            \ of exception).]"
          description: "The list of main reasons of the ApiError."
          items:
            type: "string"
        path:
          type: "string"
          example: "/kypo2-rest-user-and-group/api/v1/groups/1000 (different for each\
            \ type of exception)."
          description: "The requested URI path which caused error."
        entity_error_detail:
          description: "Entity detail related to the error."
          $ref: "#/definitions/EntityErrorDetail"
      description: "A detailed error from another Java mircorservice."
  LevelTabsHintDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      order:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      penalty:
        type: "integer"
        format: "int32"
  LevelTabsLevelDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      order:
        type: "integer"
        format: "int32"
      levelType:
        type: "string"
        enum:
        - "INFO_LEVEL"
        - "GAME_LEVEL"
        - "ASSESSMENT_LEVEL"
      title:
        type: "string"
      estimatedTime:
        type: "integer"
        format: "int64"
      maxPoints:
        type: "integer"
        format: "int32"
      content:
        type: "string"
      correctFlag:
        type: "string"
      hints:
        type: "array"
        items:
          $ref: "#/definitions/LevelTabsHintDTO"
      players:
        type: "array"
        items:
          $ref: "#/definitions/LevelTabsPlayerDTO"
      assessmentType:
        type: "string"
        enum:
        - "TEST"
        - "QUESTIONNAIRE"
  LevelTabsPlayerDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      score:
        type: "integer"
        format: "int64"
      hints:
        type: "integer"
        format: "int32"
      wrongFlags:
        type: "array"
        items:
          type: "string"
      time:
        type: "integer"
        format: "int64"
      displayedSolution:
        type: "boolean"
  Pageable:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int64"
      sort:
        $ref: "#/definitions/Sort"
      paged:
        type: "boolean"
      unpaged:
        type: "boolean"
      pageNumber:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
  Pagination:
    type: "object"
    properties:
      number:
        type: "integer"
        format: "int32"
        example: 1
        description: "Page number."
      size:
        type: "integer"
        format: "int32"
        example: 20
        description: "Page size."
      number_of_elements:
        type: "integer"
        format: "int32"
        example: 20
        description: "Number of elements in page."
      total_elements:
        type: "integer"
        format: "int64"
        example: 100
        description: "Total number of elements in this resource (in all Pages)."
      total_pages:
        type: "integer"
        format: "int32"
        example: 5
        description: "Total number of pages."
  PlayerDataDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      score:
        type: "integer"
        format: "int32"
      time:
        type: "integer"
        format: "int64"
      finished:
        type: "boolean"
      picture:
        type: "array"
        items:
          type: "string"
          format: "byte"
      avatarColor:
        type: "string"
      levels:
        type: "array"
        items:
          $ref: "#/definitions/VisualizationAbstractLevelDTO"
  PythonApiError:
    allOf:
    - $ref: "#/definitions/ApiSubError"
    - type: "object"
      properties:
        detail:
          type: "string"
          example: "Sandbox could not be found."
          description: "Detail message of the error."
        parameters:
          type: "object"
          example: "name: sandbox"
          description: "Parameters to specify details of the error."
          additionalProperties:
            type: "string"
      description: "A detailed error from another Python mircorservice."
  RoleDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      role_type:
        type: "string"
      name_of_microservice:
        type: "string"
  SnapshotHookDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 8
        description: "Main identifier of snapshotHook."
      snapshot:
        type: "string"
        example: "Snapshot 1"
        description: "Content of snapshot. What should be executed to get to particular\
          \ state."
    description: "."
  Sort:
    type: "object"
    properties:
      sorted:
        type: "boolean"
      unsorted:
        type: "boolean"
      empty:
        type: "boolean"
  TakenHintDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of hint."
      title:
        type: "string"
        example: "Hint1"
        description: "Short textual description of the hint."
      content:
        type: "string"
        example: "Very good advice"
        description: "The information and experiences that are directed towards a\
          \ participant."
      order:
        type: "integer"
        format: "int32"
        example: 1
        description: "The order of hint in game level"
    description: "A taken brief textual description to aid the participant."
  TimelineDTO:
    type: "object"
    properties:
      estimatedTime:
        type: "integer"
        format: "int64"
      levelPoints:
        type: "array"
        items:
          type: "integer"
          format: "int32"
      maxTime:
        type: "integer"
        format: "int64"
      averageTime:
        type: "number"
        format: "float"
      playerData:
        type: "array"
        items:
          $ref: "#/definitions/PlayerDataDTO"
  TrainingDefinitionByIdDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training definition."
      title:
        type: "string"
        example: "TrainingDefinition2"
        description: "A name of the training/game (e.g., Photo Hunter) ."
      description:
        type: "string"
        example: "Unreleased training definition"
        description: "Description of training definition that is visible to the participant."
      prerequisites:
        type: "array"
        description: "List of knowledge and skills necessary to complete the training."
        items:
          type: "string"
      outcomes:
        type: "array"
        description: "A list of knowledge and skills that the participant should learn\
          \ by attending the training (if it is used for educational purposes) "
        items:
          type: "string"
      state:
        type: "string"
        example: "UNRELEASED"
        description: "Current state of training definition."
        enum:
        - "PRIVATED"
        - "RELEASED"
        - "ARCHIVED"
        - "UNRELEASED"
      betaTestingGroupId:
        type: "integer"
        format: "int64"
        example: 2
        description: "Group of organizers who is allowed to see the training definition."
      levels:
        type: "array"
        description: "Information about all levels in training definition."
        items:
          $ref: "#/definitions/AbstractLevelDTO"
      showStepperBar:
        type: "boolean"
        example: false
        description: "Sign if stepper bar should be displayed."
      canBeArchived:
        type: "boolean"
        example: true
        description: "Sign if training definition can be archived or not."
      estimatedDuration:
        type: "integer"
        format: "int64"
        example: 5
        description: "Estimated time it takes to finish runs created from this definition."
      lastEdited:
        type: "string"
        format: "date-time"
        example: "2017-10-19 10:23:54+02"
        description: "Time of last edit done to definition."
    description: "A blueprint of abstract levels."
  TrainingDefinitionCreateDTO:
    type: "object"
    required:
    - "betaTestingGroup"
    - "showStepperBar"
    - "state"
    - "title"
    properties:
      title:
        type: "string"
        example: "Photo Hunter"
        description: "A name of the training/game (e.g., Photo Hunter) ."
      description:
        type: "string"
        example: "Description of Photo Hunter"
        description: "Description of training definition that is visible to the participant."
      prerequisites:
        type: "array"
        example: "[HTML, http protocol]"
        description: "List of knowledge and skills necessary to complete the training."
        items:
          type: "string"
      outcomes:
        type: "array"
        example: "[outcomes]"
        description: "A list of knowledge and skills that the participant should learn\
          \ by attending the training (if it is used for educational purposes) "
        items:
          type: "string"
      state:
        type: "string"
        example: "UNRELEASED"
        description: "Current state of training definition."
        enum:
        - "PRIVATED"
        - "RELEASED"
        - "ARCHIVED"
        - "UNRELEASED"
      betaTestingGroup:
        description: "Group of organizers who is allowed to see the training definition."
        $ref: "#/definitions/BetaTestingGroupCreateDTO"
      showStepperBar:
        type: "boolean"
        example: true
        description: "Sign if stepper bar should be displayed."
    description: "Training definition to create."
  TrainingDefinitionDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training definition."
      title:
        type: "string"
        example: "TrainingDefinition2"
        description: "A name of the training/game (e.g., Photo Hunter) ."
      description:
        type: "string"
        example: "Unreleased training definition"
        description: "Description of training definition that is visible to the participant."
      prerequisites:
        type: "array"
        description: "List of knowledge and skills necessary to complete the training."
        items:
          type: "string"
      outcomes:
        type: "array"
        description: "A list of knowledge and skills that the participant should learn\
          \ by attending the training (if it is used for educational purposes) "
        items:
          type: "string"
      state:
        type: "string"
        example: "UNRELEASED"
        description: "Current state of training definition."
        enum:
        - "PRIVATED"
        - "RELEASED"
        - "ARCHIVED"
        - "UNRELEASED"
      betaTestingGroupId:
        type: "integer"
        format: "int64"
        example: 14
        description: "Group of organizers who is allowed to see the training definition."
      showStepperBar:
        type: "boolean"
        example: false
        description: "Sign if stepper bar should be displayed."
      canBeArchived:
        type: "boolean"
        example: false
        description: "Sign if training definition can be archived or not."
      estimatedDuration:
        type: "integer"
        format: "int64"
        example: 5
        description: "Estimated time it takes to finish runs created from this definition."
      lastEdited:
        type: "string"
        format: "date-time"
        example: "2017-10-19 10:23:54+02"
        description: "Time of last edit done to definition."
    description: "A blueprint of abstract levels."
  TrainingDefinitionInfoDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training definition."
      title:
        type: "string"
        example: "TrainingDefinition2"
        description: "A name of the training/game (e.g., Photo Hunter) ."
      state:
        type: "string"
        example: "UNRELEASED"
        description: "Current state of training definition."
        enum:
        - "PRIVATED"
        - "RELEASED"
        - "ARCHIVED"
        - "UNRELEASED"
    description: "Basic training definition information."
  TrainingDefinitionRestResource:
    type: "object"
    properties:
      content:
        type: "array"
        description: "Retrieved Training Definitions from databases."
        items:
          $ref: "#/definitions/TrainingDefinitionByIdDTO"
      pagination:
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages"
  TrainingDefinitionUpdateDTO:
    type: "object"
    required:
    - "betaTestingGroup"
    - "id"
    - "showStepperBar"
    - "state"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 2
        description: "Main identifier of training definition."
      title:
        type: "string"
        example: "TrainingDefinition2"
        description: "A name of the training/game (e.g., Photo Hunter) ."
      description:
        type: "string"
        example: "Unreleased training definition"
        description: "Description of training definition that is visible to the participant."
      prerequisites:
        type: "array"
        example: "[phishing]"
        description: "List of knowledge and skills necessary to complete the training."
        items:
          type: "string"
      outcomes:
        type: "array"
        description: "A list of knowledge and skills that the participant should learn\
          \ by attending the training (if it is used for educational purposes) "
        items:
          type: "string"
      state:
        type: "string"
        example: "UNRELEASED"
        description: "Current state of training definition."
        enum:
        - "PRIVATED"
        - "RELEASED"
        - "ARCHIVED"
        - "UNRELEASED"
      betaTestingGroup:
        description: "Group of organizers who is allowed to see the training definition."
        $ref: "#/definitions/BetaTestingGroupUpdateDTO"
      showStepperBar:
        type: "boolean"
        example: false
        description: "Sign if stepper bar should be displayed."
    description: "Training definition to update."
  TrainingInstanceArchiveDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training instance."
      definitionId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training definition associated with this\
          \ instance."
      startTime:
        type: "string"
        format: "date-time"
        example: "2016-10-19 10:23:54+02"
        description: "Date when training instance starts."
      endTime:
        type: "string"
        format: "date-time"
        example: "2017-10-19 10:23:54+02"
        description: "Date when training instance ends."
      title:
        type: "string"
        example: "Concluded Instance"
        description: "Short textual description of the training instance."
      organizersRefIds:
        type: "array"
        description: "Reference to organizersRefIds which organize training instance."
        uniqueItems: true
        items:
          type: "integer"
          format: "int64"
      accessToken:
        type: "string"
        example: "pass-1234"
        description: "Token needed to access runs created from this definition"
    description: "The finished and archived instance of training definition which\
      \ includes individual finished training runs of participants."
  TrainingInstanceAssignPoolIdDTO:
    type: "object"
    required:
    - "poolId"
    properties:
      poolId:
        type: "integer"
        format: "int64"
        example: 2
        description: "Pool associated with training instance."
    description: "Training Instance assign pool ID."
  TrainingInstanceBasicInfoDTO:
    type: "object"
    required:
    - "accessToken"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training instance."
      startTime:
        type: "string"
        format: "date-time"
        example: "2016-10-19 10:23:54+02"
        description: "Date when training instance starts."
      endTime:
        type: "string"
        format: "date-time"
        example: "2017-10-19 10:23:54+02"
        description: "Date when training instance ends."
      title:
        type: "string"
        example: "Concluded Instance"
        description: "Short textual description of the training instance."
      accessToken:
        type: "string"
        example: "hunter"
        description: "Token used to access training run."
      poolId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Id of sandbox pool belonging to training instance"
  TrainingInstanceCreateDTO:
    type: "object"
    required:
    - "accessToken"
    - "endTime"
    - "startTime"
    - "title"
    - "trainingDefinitionId"
    properties:
      startTime:
        type: "string"
        format: "date-time"
        example: "2020-11-20T10:28:02.727Z"
        description: "Date when training instance starts."
      endTime:
        type: "string"
        format: "date-time"
        example: "2020-11-25T10:26:02.727Z"
        description: "Date when training instance ends."
      title:
        type: "string"
        example: "December instance"
        description: "Short textual description of the training instance."
      accessToken:
        type: "string"
        example: "hunter"
        description: "AccessToken which will be modified and then used for accessing\
          \ training run."
      trainingDefinitionId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Reference to training definition from which is training instance\
          \ created."
    description: "Training Instance to create."
  TrainingInstanceDTO:
    type: "object"
    required:
    - "accessToken"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training instance."
      startTime:
        type: "string"
        format: "date-time"
        example: "2016-10-19 10:23:54+02"
        description: "Date when training instance starts."
      endTime:
        type: "string"
        format: "date-time"
        example: "2017-10-19 10:23:54+02"
        description: "Date when training instance ends."
      title:
        type: "string"
        example: "Concluded Instance"
        description: "Short textual description of the training instance."
      trainingDefinition:
        description: "Reference to training definition from which is training instance\
          \ created."
        $ref: "#/definitions/TrainingDefinitionByIdDTO"
      accessToken:
        type: "string"
        example: "hunter"
        description: "Token used to access training run."
      poolId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Id of sandbox pool belonging to training instance"
      sandboxesWithTrainingRun:
        type: "array"
        example: "[3,15]"
        description: "Ids of sandboxes which are assigned to training run."
        items:
          type: "integer"
          format: "int64"
    description: "A session of attending a concrete training, which involves a deployment\
      \ of the training definition in one or more sandbox instances that are then\
      \ assigned to participants. The instance comprises one or more game runs."
  TrainingInstanceFindAllResponseDTO:
    type: "object"
    required:
    - "accessToken"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training instance."
      startTime:
        type: "string"
        format: "date-time"
        example: "2016-10-19 10:23:54+02"
        description: "Date when training instance starts."
      endTime:
        type: "string"
        format: "date-time"
        example: "2017-10-19 10:23:54+02"
        description: "Date when training instance ends."
      title:
        type: "string"
        example: "Concluded Instance"
        description: "Short textual description of the training instance."
      trainingDefinition:
        description: "Reference to training definition from which is training instance\
          \ created."
        $ref: "#/definitions/TrainingDefinitionByIdDTO"
      accessToken:
        type: "string"
        example: "hunter"
        description: "Token used to access training run."
      poolId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Id of sandbox pool belonging to training instance"
  TrainingInstanceRestResource:
    type: "object"
    properties:
      content:
        type: "array"
        description: "Retrieved Training Instances from databases."
        items:
          $ref: "#/definitions/TrainingInstanceFindAllResponseDTO"
      pagination:
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages"
  TrainingInstanceUpdateDTO:
    type: "object"
    required:
    - "accessToken"
    - "endTime"
    - "id"
    - "startTime"
    - "title"
    - "trainingDefinitionId"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 2
        description: "Main identifier of training instance."
      startTime:
        type: "string"
        format: "date-time"
        example: "2019-10-19T10:28:02.727Z"
        description: "Date when training instance starts."
      endTime:
        type: "string"
        format: "date-time"
        example: "2019-10-25T10:28:02.727Z"
        description: "Date when training instance ends."
      title:
        type: "string"
        example: "Current Instance"
        description: "Short textual description of the training instance."
      accessToken:
        type: "string"
        example: "hello-6578"
        description: "AccessToken which will be modified and then used for accessing\
          \ training run."
      trainingDefinitionId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Reference to training definition from which is training instance\
          \ created."
    description: "Training Instance to update."
  TrainingRunByIdDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training run."
      startTime:
        type: "string"
        format: "date-time"
        example: "2016-10-19 10:23:54+02"
        description: "Date when training run started."
      endTime:
        type: "string"
        format: "date-time"
        example: "2022-10-19 10:23:54+02"
        description: "Date when training run ends."
      eventLogReference:
        type: "string"
      state:
        type: "string"
        example: "ALLOCATED"
        description: "Current state of training run."
        enum:
        - "RUNNING"
        - "FINISHED"
        - "ARCHIVED"
      sandboxInstanceRefId:
        type: "integer"
        format: "int64"
        description: "Reference to the received sandbox."
      participantRef:
        description: "Reference to participant of training run."
        $ref: "#/definitions/UserRefDTO"
      definitionId:
        type: "integer"
        format: "int64"
        description: "Id of associated training definition"
      instanceId:
        type: "integer"
        format: "int64"
        description: "Id of associated training instance"
      previousSandboxInstanceRefId:
        type: "integer"
        format: "int64"
        example: 12
        description: "Id of a previous sandbox instance assigned to the training run."
    description: "The act, or a recording, of performing actions during training from\
      \ a perspective of one concrete participant."
  TrainingRunDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training run."
      startTime:
        type: "string"
        format: "date-time"
        example: "2016-10-19 10:23:54+02"
        description: "Date when training run started."
      endTime:
        type: "string"
        format: "date-time"
        example: "2022-10-19 10:23:54+02"
        description: "Date when training run ends."
      eventLogReference:
        type: "string"
      state:
        type: "string"
        example: "ALLOCATED"
        description: "Current state of training run."
        enum:
        - "RUNNING"
        - "FINISHED"
        - "ARCHIVED"
      sandboxInstanceRefId:
        type: "integer"
        format: "int64"
        description: "Reference to the received sandbox."
      participantRef:
        description: "Reference to participant of training run."
        $ref: "#/definitions/UserRefDTO"
    description: "The act, or a recording, of performing actions during training from\
      \ a perspective of one concrete participant."
  TrainingRunRestResource:
    type: "object"
    properties:
      content:
        type: "array"
        description: "Retrieved Training Runs from databases."
        items:
          $ref: "#/definitions/TrainingRunDTO"
      pagination:
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages"
  UserInfoDTO:
    type: "object"
    properties:
      sub:
        type: "string"
      mail:
        type: "string"
      iss:
        type: "string"
      roles:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/RoleDTO"
      id:
        type: "integer"
        format: "int64"
      full_name:
        type: "string"
      given_name:
        type: "string"
      family_name:
        type: "string"
  UserInfoRestResource:
    type: "object"
    properties:
      content:
        type: "array"
        description: "Retrieved Training Instances from databases."
        items:
          $ref: "#/definitions/UserInfoDTO"
      pagination:
        description: "Pagination including: page number, number of elements in page,\
          \ size, total elements and total pages."
        $ref: "#/definitions/Pagination"
    description: "Content (Retrieved data) and meta information about REST API result\
      \ page. Including page number, number of elements in page, size of elements,\
      \ total number of elements and total number of pages"
  UserRefDTO:
    type: "object"
    properties:
      iss:
        type: "string"
        example: "https://oidc.muni.cz"
        description: "Reference to user in another microservice and get his iss"
      picture:
        type: "array"
        example: "iVBORw0KGgoAAAANSUhEUgAAAEsAAABLCAYAAAA4TnrqAAACIUlEQVR4Xu3YsY0dSQxAQQUlpXT5Z3CS/YgxSrQa4gLlEOBb9pj/x6//fv7/t/78/XhN3yBWyz3kBX2DWC33kBf0DWK13ENe0DeI1XIPeUHfIFbLPeQFfYNYLfeQF/QNYrXcQ17QN4jVcg95Qd8gVss95AV9g1gt95AX9A1itdxDXtA3iNVyD3lB3yBWyz3kBX2DWC33kBf0DWLERGOiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS4yB6CGiLdGWaEuMgeghoi3RlmhLjIHoIaIt0ZZoS6z+8b/mPha4jwXuY4H7WOA+FriPBe5jgftY4D4WuI8F7mOB+1jgPha4jwXGbzbn2xicb2Nwvo3B+TYG59sYnG9jcL6Nwfk2BufbGJxvY3C+jcH5Ngbn2xicb2Nwvq1+z2pMtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3Rllgt9xDRlmhLtCVWyz1EtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3Rllgt9xDRlmhLtCVWyz1EtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3Rllgt9xDRlmhLtCVWyz1EtCXaEm2J1XIPEW2JtkRbYrXcQ0Rboi3RlvgNt34wfeJElG8AAAAASUVORK5CYII="
        description: "Identicon of a user."
        items:
          type: "string"
          format: "byte"
      user_ref_id:
        type: "integer"
        format: "int64"
        example: 1
        description: "Reference to user in another microservice and get his id"
      sub:
        type: "string"
        example: "999999@mail.muni.cz"
        description: "Reference to user in another microservice."
      full_name:
        type: "string"
        example: "Mgr. John Doe"
        description: "Reference to user in another microservice and get his full name"
      given_name:
        type: "string"
        example: "John"
        description: "User given name"
      family_name:
        type: "string"
        example: "Doe"
        description: "User family name"
    description: "User information from user-and-group microservice is mapped to this\
      \ class and is also used to provide information about authors, participants,\
      \ and organizers."
  ValidateFlagDTO:
    type: "object"
    required:
    - "flag"
    properties:
      flag:
        type: "string"
        example: "flag"
        description: "Flag to be validated."
  VisualizationAbstractLevelDTO:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      order:
        type: "integer"
        format: "int32"
      levelType:
        type: "string"
        enum:
        - "INFO_LEVEL"
        - "GAME_LEVEL"
        - "ASSESSMENT_LEVEL"
  VisualizationInfoDTO:
    type: "object"
    properties:
      trainingDefinitionId:
        type: "integer"
        format: "int64"
        example: 1
        description: "Main identifier of training definition."
      trainingDefinitionTitle:
        type: "string"
        example: "TrainingDefinition2"
        description: "A name of the training/game (e.g., Photo Hunter) ."
      trainingDefinitionEstimatedDuration:
        type: "integer"
        format: "int64"
        example: 5
        description: "Estimated time it takes to finish runs created from this definition."
      levels:
        type: "array"
        description: "Information about all levels in training definition."
        items:
          $ref: "#/definitions/AbstractLevelVisualizationDTO"
    description: "A model includes necessary information about training definition\
      \ which is needed for visualizations."

